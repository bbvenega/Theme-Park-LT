{"ast":null,"code":"// This component is used to display a list of attractions and add them to the visit.\nimport React,{useState}from\"react\";// The AttractionsList component is a functional component that will render a list of attractions that a user can add to their visit.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AttractionsList=_ref=>{let{attractions,onAddAttraction,setElapsedTime,setShowConfirmationModal}=_ref;const[selectedAttraction,setSelectedAttraction]=useState(null);const[fastpass,setFastpass]=useState(false);const[singleRider,setSingleRider]=useState(false);const[brokeDown,setBrokeDown]=useState(false);// The handleAttractionSelect function is used to select an attraction from the list of attractions.\n// This is in preparation for adding the attraction to the visit.\nconst handleAttractionSelect=attraction=>{// console.log(attraction);\nsetSelectedAttraction(attraction);setFastpass(false);setSingleRider(false);setBrokeDown(false);setElapsedTime(0);// Reset elapsed time for the new attraction\n};// The handleSubmit function is used to add the selected attraction to the visit.\nconst handleSubmit=()=>{// console.log(selectedAttraction);\nif(selectedAttraction){onAddAttraction({attraction:selectedAttraction,fastpass,singleRider,brokeDown});}};// The return statement below will render the AttractionsList component.\n// The component will display a list of selectable attractions from the visit's theme park that a user can add to their visit.\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{className:\"h2-attraction-list-title\",children:\"Attractions\"}),attractions&&attractions.length>0?/*#__PURE__*/_jsx(\"ul\",{className:\"attractions-list\",children:attractions.filter(attraction=>attraction.entityType===\"ATTRACTION\"&&attraction.status===\"OPERATING\"&&attraction.queue&&attraction.queue.STANDBY&&attraction.queue.STANDBY.waitTime!=null&&attraction.queue.STANDBY.waitTime!==0).map(attraction=>/*#__PURE__*/_jsxs(\"li\",{className:\"attraction-item \".concat(selectedAttraction===attraction?\"selected\":\"\"),onClick:()=>handleAttractionSelect(attraction),children:[/*#__PURE__*/_jsx(\"span\",{className:\"attraction-name\",children:attraction.name}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\" Live Wait Time:\",\" \",attraction.queue&&attraction.queue.STANDBY?attraction.queue.STANDBY.waitTime:\"N/A\",\" \",\"minutes\"]},attraction.id))}):/*#__PURE__*/_jsx(\"p\",{children:\"No attractions available, ensure your park is open!\"}),selectedAttraction&&/*#__PURE__*/_jsxs(\"div\",{className:\"attraction-select-options\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Selected Attraction:\",/*#__PURE__*/_jsx(\"br\",{}),selectedAttraction.name]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:fastpass,onChange:e=>setFastpass(e.target.checked)}),\"Fastpass?\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:singleRider,onChange:e=>setSingleRider(e.target.checked)}),\"Single Rider?\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:handleSubmit,children:\"Add Attraction\"})]})]});};export default AttractionsList;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","AttractionsList","_ref","attractions","onAddAttraction","setElapsedTime","setShowConfirmationModal","selectedAttraction","setSelectedAttraction","fastpass","setFastpass","singleRider","setSingleRider","brokeDown","setBrokeDown","handleAttractionSelect","attraction","handleSubmit","children","className","length","filter","entityType","status","queue","STANDBY","waitTime","map","concat","onClick","name","id","type","checked","onChange","e","target"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Lists/AttractionsList.js"],"sourcesContent":["// This component is used to display a list of attractions and add them to the visit.\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// The AttractionsList component is a functional component that will render a list of attractions that a user can add to their visit.\r\nconst AttractionsList = ({\r\n  attractions,\r\n  onAddAttraction,\r\n  setElapsedTime,\r\n  setShowConfirmationModal,\r\n}) => {\r\n  const [selectedAttraction, setSelectedAttraction] = useState(null);\r\n  const [fastpass, setFastpass] = useState(false);\r\n  const [singleRider, setSingleRider] = useState(false);\r\n  const [brokeDown, setBrokeDown] = useState(false);\r\n\r\n  // The handleAttractionSelect function is used to select an attraction from the list of attractions.\r\n  // This is in preparation for adding the attraction to the visit.\r\n  const handleAttractionSelect = (attraction) => {\r\n    // console.log(attraction);\r\n    setSelectedAttraction(attraction);\r\n    setFastpass(false);\r\n    setSingleRider(false);\r\n    setBrokeDown(false);\r\n    setElapsedTime(0); // Reset elapsed time for the new attraction\r\n  };\r\n\r\n  // The handleSubmit function is used to add the selected attraction to the visit.\r\n  const handleSubmit = () => {\r\n    // console.log(selectedAttraction);\r\n    if (selectedAttraction) {\r\n      onAddAttraction({\r\n        attraction: selectedAttraction,\r\n        fastpass,\r\n        singleRider,\r\n        brokeDown,\r\n      });\r\n    }\r\n  };\r\n\r\n  // The return statement below will render the AttractionsList component.\r\n  // The component will display a list of selectable attractions from the visit's theme park that a user can add to their visit.\r\n  return (\r\n    <div>\r\n      <h2 className=\"h2-attraction-list-title\">Attractions</h2>\r\n      {attractions && attractions.length > 0 ? (\r\n        <ul className=\"attractions-list\">\r\n          {attractions\r\n            .filter(\r\n              (attraction) =>\r\n                attraction.entityType === \"ATTRACTION\" &&\r\n                attraction.status === \"OPERATING\" &&\r\n                attraction.queue &&\r\n                attraction.queue.STANDBY &&\r\n                attraction.queue.STANDBY.waitTime != null &&\r\n                attraction.queue.STANDBY.waitTime !== 0\r\n            )\r\n            .map((attraction) => (\r\n              <li\r\n                key={attraction.id}\r\n                className={`attraction-item ${\r\n                  selectedAttraction === attraction ? \"selected\" : \"\"\r\n                }`}\r\n                onClick={() => handleAttractionSelect(attraction)}\r\n              >\r\n                <span className=\"attraction-name\">{attraction.name}</span>{\" \"}\r\n                <br></br> Live Wait Time:{\" \"}\r\n                {attraction.queue && attraction.queue.STANDBY\r\n                  ? attraction.queue.STANDBY.waitTime\r\n                  : \"N/A\"}{\" \"}\r\n                minutes\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No attractions available, ensure your park is open!</p>\r\n      )}\r\n      {selectedAttraction && (\r\n        <div className=\"attraction-select-options\">\r\n          <h3>Selected Attraction: \r\n            <br></br>{selectedAttraction.name}</h3>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={fastpass}\r\n              onChange={(e) => setFastpass(e.target.checked)}\r\n            />\r\n            Fastpass?\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={singleRider}\r\n              onChange={(e) => setSingleRider(e.target.checked)}\r\n            />\r\n            Single Rider?\r\n          </label>\r\n\r\n          <button className=\"button\" onClick={handleSubmit}>\r\n            Add Attraction\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttractionsList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}