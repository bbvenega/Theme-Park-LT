{"ast":null,"code":"// The dashboard is the landing page for the user after they have logged in. The user can see a list of their visits and add a new visit. The dashboard is a private page that can only be accessed after logging in. The user can also log out from the dashboard.\n// The following imports are required for this page:\nimport React,{useState,useEffect}from\"react\";import{useLocation,useNavigate}from\"react-router-dom\";import{useAuth0}from\"@auth0/auth0-react\";// The following components are imported from the components directory:\nimport LogoutButton from\"../components/auth/LogoutButton\";import AddVisitModal from\"../components/Modals/AddVisitModal\";import ParksList from\"../components/Lists/ParksList\";// The following components are imported from the components/Modals directory:\nimport PageTransition from\"../services/Cosmetic/pageTransition\";import{getVisitDetails,getVisitsByUserId,fetchParks,addVisit}from\"../services/API Calls/VisitService\";import{FormatDate}from\"../services/Time Stuff/FormatDate\";// The following styles are imported from the Styles directory:\nimport\"../Styles/Dashboard.css\";import\"../Styles/Button.css\";import\"../Styles/Fonts.css\";// The dashbaord component is a functional component that will render the user's dashboard. The user can see a list of their visits and add a new visit. The dashboard is a private page that can only be accessed after logging in. The user can also log out from the dashboard.\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Dashboard=()=>{// The variables below are all dependent on React hooks.\nconst navigate=useNavigate();const{getAccessTokenSilently,user}=useAuth0();const{error}=useState(null);const{state}=useLocation();// The variables below are all used to fetch and load a user's visits.\nconst[visits,setVisits]=useState([]);const[loading,setLoading]=useState(true);const[parks,setParks]=useState([]);const[showAddVisitModal,setShowAddVisitModal]=useState(false);// The useEffect hook is used to fetch the user's visits and set the state of the visits variable.\nuseEffect(()=>{const fetchVisits=async()=>{try{// Check if the user object and necessary properties are available\nif(!user||!user.sub){console.warn(\"User information not available yet.\");return;// Exit the function early if user info is not available\n}const data=(state===null||state===void 0?void 0:state.visits)||(await getVisitsByUserId(user,getAccessTokenSilently));setVisits(data.reverse());setLoading(false);}catch(error){console.error(\"Error fetching visits: \",error);setLoading(false);}};fetchVisits();},[getAccessTokenSilently,state,user]);// The handleSelectVisit function is used to select a visit and navigate to the VisitPage component.\n// It preloads the visit details to the state of the VisitPage component.\nconst handleSelectVisit=async visit=>{// console.log(\"Selected Visit: \", visit);\ntry{const visitDetails=await getVisitDetails(visit.id,getAccessTokenSilently);if(visitDetails&&visitDetails.userAttractions){visitDetails.userAttractions.reverse();}navigate(\"/visit/\".concat(visit.id),{state:{visitDetails}});}catch(error){console.error(\"Error fetching visit details: \",error);}finally{}};// The handleOpenAddVisitModal function is used to open the AddVisitModal component and fetch the parks data.\nconst handleOpenAddVisitModal=async()=>{try{const parkData=await fetchParks(getAccessTokenSilently);setParks(parkData);setShowAddVisitModal(true);}catch(error){console.error(\"Error fetching parks: \",error);}};// The handleCloseModal function is used to close the AddVisitModal component.\nconst handleCloseModal=()=>{setShowAddVisitModal(false);};// The handleAddVisit function is used to add a new visit and navigate to the VisitPage component.\nconst handleAddVisit=async newVisit=>{try{const createdVisit=await addVisit(newVisit,getAccessTokenSilently);const updatedVisits=await getVisitsByUserId(user,getAccessTokenSilently);setVisits(updatedVisits.reverse());setShowAddVisitModal(false);if(createdVisit&&createdVisit.id){// console.log(\"Created Visit: \", createdVisit);\nnavigate(\"/visit/\".concat(createdVisit.id),{state:{visitDetails:createdVisit}});}else{console.error(\"Error adding visit: \",createdVisit);}}catch(error){console.error(\"Error adding visit: \",error);}};// The following conditional statements are used to handle loading and error states.\nif(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Oops... \",error.message]});}// The following conditional statement is used to display a loading message while the visits are being fetched.\n// if (loading) {\n//   return <div>Loading...</div>;\n// }\n// The following JSX is the structure of the dashboard component.\nreturn/*#__PURE__*/_jsx(PageTransition,{children:/*#__PURE__*/_jsx(\"div\",{className:loading?\"hidden-DB\":\"fade-in-DB\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to Your Dashboard\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Your Visits\"}),visits&&visits.length>0?/*#__PURE__*/_jsx(\"ul\",{className:\"visit-list\",children:visits.map(visit=>/*#__PURE__*/_jsx(\"li\",{className:\"visit-list-item\",onClick:()=>handleSelectVisit(visit),children:/*#__PURE__*/_jsxs(\"div\",{className:\"visit-list-item-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"modal-text-header\",children:visit.parkName}),/*#__PURE__*/_jsx(\"div\",{className:\"modal-text-subtext\",children:FormatDate(visit.dateVisited)})]})},visit.id))}):/*#__PURE__*/_jsx(\"p\",{children:\"No Visits Found!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-button-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"big-button\",type:\"button\",onClick:handleOpenAddVisitModal,children:\"Add Visit\"}),/*#__PURE__*/_jsx(AddVisitModal,{show:showAddVisitModal,onClose:handleCloseModal,children:/*#__PURE__*/_jsx(ParksList,{parks:parks,onAdd:handleAddVisit})}),/*#__PURE__*/_jsx(LogoutButton,{})]})]})})});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useAuth0","LogoutButton","AddVisitModal","ParksList","PageTransition","getVisitDetails","getVisitsByUserId","fetchParks","addVisit","FormatDate","jsxs","_jsxs","jsx","_jsx","Dashboard","navigate","getAccessTokenSilently","user","error","state","visits","setVisits","loading","setLoading","parks","setParks","showAddVisitModal","setShowAddVisitModal","fetchVisits","sub","console","warn","data","reverse","handleSelectVisit","visit","visitDetails","id","userAttractions","concat","handleOpenAddVisitModal","parkData","handleCloseModal","handleAddVisit","newVisit","createdVisit","updatedVisits","children","message","className","length","map","onClick","parkName","dateVisited","type","show","onClose","onAdd"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/pages/DashBoard.js"],"sourcesContent":["// The dashboard is the landing page for the user after they have logged in. The user can see a list of their visits and add a new visit. The dashboard is a private page that can only be accessed after logging in. The user can also log out from the dashboard.\r\n\r\n// The following imports are required for this page:\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// The following components are imported from the components directory:\r\nimport LogoutButton from \"../components/auth/LogoutButton\";\r\nimport AddVisitModal from \"../components/Modals/AddVisitModal\";\r\nimport ParksList from \"../components/Lists/ParksList\";\r\n\r\n// The following components are imported from the components/Modals directory:\r\nimport PageTransition from \"../services/Cosmetic/pageTransition\";\r\nimport {\r\n  getVisitDetails,\r\n  getVisitsByUserId,\r\n  fetchParks,\r\n  addVisit,\r\n} from \"../services/API Calls/VisitService\";\r\nimport {FormatDate} from \"../services/Time Stuff/FormatDate\";\r\n\r\n// The following styles are imported from the Styles directory:\r\nimport \"../Styles/Dashboard.css\";\r\nimport \"../Styles/Button.css\";\r\nimport \"../Styles/Fonts.css\";\r\n\r\n// The dashbaord component is a functional component that will render the user's dashboard. The user can see a list of their visits and add a new visit. The dashboard is a private page that can only be accessed after logging in. The user can also log out from the dashboard.\r\nconst Dashboard = () => {\r\n  // The variables below are all dependent on React hooks.\r\n  const navigate = useNavigate();\r\n  const { getAccessTokenSilently, user } = useAuth0();\r\n  const { error } = useState(null);\r\n  const { state } = useLocation();\r\n\r\n  // The variables below are all used to fetch and load a user's visits.\r\n  const [visits, setVisits] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [parks, setParks] = useState([]);\r\n  const [showAddVisitModal, setShowAddVisitModal] = useState(false);\r\n\r\n  // The useEffect hook is used to fetch the user's visits and set the state of the visits variable.\r\n  useEffect(() => {\r\n    const fetchVisits = async () => {\r\n      try {\r\n\r\n              // Check if the user object and necessary properties are available\r\n      if (!user || !user.sub) {\r\n        console.warn(\"User information not available yet.\");\r\n        return; // Exit the function early if user info is not available\r\n      }\r\n        const data =\r\n          state?.visits ||\r\n          (await getVisitsByUserId(user, getAccessTokenSilently));\r\n        setVisits(data.reverse());\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching visits: \", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVisits();\r\n  }, [getAccessTokenSilently, state, user]);\r\n\r\n  // The handleSelectVisit function is used to select a visit and navigate to the VisitPage component.\r\n  // It preloads the visit details to the state of the VisitPage component.\r\n  const handleSelectVisit = async (visit) => {\r\n    // console.log(\"Selected Visit: \", visit);\r\n\r\n    try {\r\n      const visitDetails = await getVisitDetails(\r\n        visit.id, \r\n        getAccessTokenSilently\r\n      );\r\n\r\n      if(visitDetails && visitDetails.userAttractions) { \r\n      visitDetails.userAttractions.reverse();\r\n      \r\n      }\r\n      navigate(`/visit/${visit.id}`, { state: { visitDetails } });\r\n    } catch (error) {\r\n      console.error(\"Error fetching visit details: \", error);\r\n    } finally {\r\n    }\r\n  };\r\n\r\n  // The handleOpenAddVisitModal function is used to open the AddVisitModal component and fetch the parks data.\r\n  const handleOpenAddVisitModal = async () => {\r\n    try {\r\n      const parkData = await fetchParks(getAccessTokenSilently);\r\n     \r\n      setParks(parkData);\r\n      setShowAddVisitModal(true);\r\n    } catch (error) {\r\n      console.error(\"Error fetching parks: \", error);\r\n    }\r\n  };\r\n\r\n  // The handleCloseModal function is used to close the AddVisitModal component.\r\n  const handleCloseModal = () => {\r\n    setShowAddVisitModal(false);\r\n  };\r\n\r\n  // The handleAddVisit function is used to add a new visit and navigate to the VisitPage component.\r\n  const handleAddVisit = async (newVisit) => {\r\n    try {\r\n      const createdVisit = await addVisit(newVisit, getAccessTokenSilently);\r\n      const updatedVisits = await getVisitsByUserId(\r\n        user,\r\n        getAccessTokenSilently\r\n      );\r\n      setVisits(updatedVisits.reverse());\r\n      setShowAddVisitModal(false);\r\n\r\n      \r\n\r\n     if(createdVisit && createdVisit.id) {\r\n      // console.log(\"Created Visit: \", createdVisit);\r\n      navigate(`/visit/${createdVisit.id}`, { state: { visitDetails: createdVisit } });\r\n     } else {\r\n      console.error(\"Error adding visit: \", createdVisit);\r\n     }\r\n\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error adding visit: \", error);\r\n    }\r\n  };\r\n\r\n  // The following conditional statements are used to handle loading and error states.\r\n  if (error) {\r\n    return <div>Oops... {error.message}</div>;\r\n  }\r\n\r\n  // The following conditional statement is used to display a loading message while the visits are being fetched.\r\n  // if (loading) {\r\n  //   return <div>Loading...</div>;\r\n  // }\r\n  \r\n  // The following JSX is the structure of the dashboard component.\r\n  return (\r\n    <PageTransition>\r\n      <div className={loading ? \"hidden-DB\" : \"fade-in-DB\"}>\r\n      <div className=\"dashboard-container\">\r\n        <h1>Welcome to Your Dashboard</h1>\r\n        \r\n        <h2>Your Visits</h2>\r\n        {/* If the visits array is not empty, the component will render a list of the user's visits. If the visits array is empty, the component will render a message saying \"No Visits Found!\". */}\r\n        {visits && visits.length > 0 ? (\r\n          <ul className=\"visit-list\">\r\n            {/* All of the user's visits are displayed in a list. Each visit is a clickable list item that will navigate the user to the VisitPage component when clicked. */}\r\n            {visits.map((visit) => (\r\n              <li\r\n                key={visit.id}\r\n                className=\"visit-list-item\"\r\n                onClick={() => handleSelectVisit(visit)}\r\n              >\r\n                <div className=\"visit-list-item-content\">\r\n                  <div className=\"modal-text-header\">\r\n                  {visit.parkName} \r\n                  </div>\r\n                  <div className=\"modal-text-subtext\">\r\n                    {/* {console.log(\"Visit date: \", visit.dateVisited)} */}\r\n                  {FormatDate(visit.dateVisited)}\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>No Visits Found!</p>\r\n        )}\r\n        <div className=\"dashboard-button-container\">\r\n        <button\r\n          className=\"big-button\"\r\n          type=\"button\"\r\n          onClick={handleOpenAddVisitModal}\r\n        >\r\n          Add Visit\r\n        </button>\r\n        {/* The AddVisitModal component is displayed when the showAddVisitModal state is true. */}\r\n        <AddVisitModal show={showAddVisitModal} onClose={handleCloseModal}>\r\n          <ParksList parks={parks} onAdd={handleAddVisit} />\r\n        </AddVisitModal>\r\n        <LogoutButton />\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </PageTransition>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}