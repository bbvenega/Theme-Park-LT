{"ast":null,"code":"// The visit page is used to display a user's visit and allows them to add, edit, and delete attractions from their visit.\n// The following imports are required for this page:\nimport React,{useState,useEffect}from\"react\";import{useParams,useNavigate,useLocation}from\"react-router-dom\";import axios from\"axios\";import{useAuth0}from\"@auth0/auth0-react\";// The following components are imported from the components directory:\nimport AttractionsList from\"../components/Lists/AttractionsList\";import Stopwatch from\"../components/Timers/stopwatch\";// The following components are imported from the components/Modals directory:\nimport Modal from\"../components/Modals/Modal\";import ConfirmationModal from\"../components/Modals/ConfirmationModal\";import EditAttractionModal from\"../components/Modals/EditAttractionModal\";import DeleteVisitModal from\"../components/Modals/DeleteVisitModal\";import BreakdownTimerModal from\"../components/Modals/BreakdownTimerModal\";import InfoModal from\"../components/Modals/InfoModal\";// The following services are imported from the services directory:\nimport{formatTime}from\"../services/Time Stuff/formatTime\";import getTimeofDay from\"../services/Time Stuff/getTimeofDay\";import PageTransition from\"../services/Cosmetic/pageTransition\";import{getVisitDetails,getVisitAttractions,getVisitsByUserId,deleteVisit}from\"../services/API Calls/VisitService\";// The following styles are imported from the Styles directory:\nimport\"../Styles/VisitPage.css\";import\"../Styles/Button.css\";import\"../Styles/Fonts.css\";// The VisitPage component is a functional component that will display a user's visit and allow them to add, edit, and delete attractions from their visit.\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const VisitPage=()=>{// The variables below are all dependent on React hooks.\nconst{visitId}=useParams();const{state}=useLocation();const{getAccessTokenSilently,user}=useAuth0();const navigate=useNavigate();// The variables below are used to manage the state of modal components.\nconst[showModal,setShowModal]=useState(false);const[visitDetails,setVisitDetails]=useState((state===null||state===void 0?void 0:state.visitDetails)||null);const[showEditAttractionModal,setShowEditAttractionModal]=useState(false);const[showConfirmationModal,setShowConfirmationModal]=useState(false);const[showDeleteModal,setShowDeleteModal]=useState(false);const[showInfoModal,setShowInfoModal]=useState(false);// The variables below are used to manage the state of selected attractions that are being added / deleted.\nconst[selectedAttractionData,setSelectedAttractionData]=useState(null);const[selectedAttraction,setSelectedAttraction]=useState(null);const[breakdownTime,setBreakdownTime]=useState(0);const[elapsedTime,setElapsedTime]=useState(0);const[parkName,setParkName]=useState(null);const[attractions,setAttractions]=useState([]);const[loadingPage,setLoadingPage]=useState(!(state!==null&&state!==void 0&&state.visitDetails));const[loadingAttractions,setLoadingAttractions]=useState(true);// The useEffect hook below is used to fetch visit details based on the state of the visit.\n// If the visit details are not present, the visit details are fetched.\n// Otherwise, the loading page is set to false and the visit details are displayed.\nuseEffect(()=>{if(!(state!==null&&state!==void 0&&state.visitDetails)){const fetchVisitDetails=async()=>{try{const data=await getVisitDetails(visitId,getAccessTokenSilently);setVisitDetails(data);setLoadingPage(false);}catch(error){console.error(\"Error fetching visit details:\",error);setLoadingPage(false);}};fetchVisitDetails();}},[visitId,getAccessTokenSilently,state]);// The useEffect hook is dependent on the visitId, getAccessTokenSilently, and state variables.\n// The useEffect hook below is used to set the park name based on the visit details.\n// This is used to display the park name on the visit page.\nuseEffect(()=>{if(visitDetails){setParkName(visitDetails.parkName);// console.log(\"Park name set: \", visitDetails.parkName);\n}},[visitDetails]);// The useEffect hook is dependent on the visitDetails variable.\n// The useEffect hook below is used to fetch attractions based on the visitId.\n// If the attractions are not present, the attractions are fetched.\n// Otherwise, the loading attractions is set to false and the attractions are displayed.\nuseEffect(()=>{console.log(\"Visit ID: \",visitId);const fetchAttractions=async()=>{try{console.log(\"Fetching attractions...\");const data=await getVisitAttractions(visitId,getAccessTokenSilently);const sortedAttractions=data.sort((a,b)=>a.name.localeCompare(b.name));setAttractions(sortedAttractions);setLoadingAttractions(false);// Data is ready\n}catch(error){console.error(\"Error fetching attractions: \",error);setLoadingAttractions(false);// Error occurred, stop loading\n}};console.log(\"Initial fetch at: \",new Date());fetchAttractions();// Initial fetch\nconst intervalId=setInterval(()=>{console.log(\"Fetching at interval @ \",new Date());fetchAttractions();},300000);// 10 seconds\nreturn()=>{console.log(\"Clearing interval @ \",new Date());clearInterval(intervalId);};},[visitId,getAccessTokenSilently]);// The useEffect hook is dependent on the visitId and getAccessTokenSilently variables.\n// The handleOpenModal function is used to open the modal component.\nconst handleOpenModal=()=>{setShowModal(true);};// The handleCloseModal function is used to close the modal component.\nconst handleCloseModal=()=>{setShowModal(false);};// The handleShowConfirmationModal function is used to show the confirmation modal component.\nconst handleShowConfirmationModal=()=>{setShowConfirmationModal(true);};// The handleCloseConfirmationModal function is used to close the confirmation modal component.\nconst handleCloseConfirmationModal=()=>{setShowConfirmationModal(false);};// The handleShowEditAttractionModal function is used to show the edit attraction modal component.\n// It also sets the selected attraction to the attraction that is being edited so that it can be displayed in the modal.\nconst handleShowEditAttractionModal=attraction=>{setShowEditAttractionModal(true);setSelectedAttraction(attraction);};// The handleCloseEditAttractionModal function is used to close the edit attraction modal component.\nconst handleCloseEditAttractionModal=()=>{setShowEditAttractionModal(false);};// The handleShowDeleteModal function is used to show the delete visit modal component.\nconst handleShowDeleteModal=()=>{setShowDeleteModal(true);};// The handleCloseDeleteModal function is used to close the delete visit modal component.\nconst handleCloseDeleteModal=()=>{setShowDeleteModal(false);};const handleShowInfoModal=()=>{setShowInfoModal(true);};const handleCloseInfoModal=()=>{setShowInfoModal(false);};// The handleDeleteVisit function is used to delete the visit entirely.\nconst handleDeleteVisit=async()=>{try{await deleteVisit(visitId,getAccessTokenSilently);goToDashboard();}catch(error){console.error(\"Error deleting visit: \",error);}};// The following function is used to make naviagtion to the dashboard page easier:\n// It fetches the details of the user's visits and navigates to the dashboard page.\nconst goToDashboard=async()=>{try{const data=await getVisitsByUserId(user,getAccessTokenSilently);navigate(\"/dashboard\",{state:{visits:data}});}catch(error){console.error(\"Error fetching user visits: \",error);}};// The handleSaveAttraction function is used to save the updated attraction details.\n// It updates the attraction details in the database and updates the visit details with the new attraction details.\nconst handleSaveAttraction=async updatedAttraction=>{// console.log(\"Updated attraction: \", updatedAttraction);\ntry{const token=await getAccessTokenSilently();// console.log(\"Token: \", token);\n// console.log(\"Updated attraction: \", updatedAttraction.id);\n// the payload is updated to match the format of the database\nconst updatedAttractionPayload={id:updatedAttraction.id,timeOfDay:updatedAttraction.timeOfDay,actualWaitTime:updatedAttraction.actualWaitTime*60,postedWaitTime:updatedAttraction.postedWaitTime,attractionName:updatedAttraction.attractionName,fastpass:updatedAttraction.fastpass,singleRider:updatedAttraction.singleRider,brokeDown:updatedAttraction.brokeDown};// The updated attraction is sent to the database to be updated.\nawait axios.put(\"\".concat(process.env.REACT_APP_API_URL,\"/visits/\").concat(visitId,\"/attractions/\").concat(updatedAttraction.id),{...updatedAttractionPayload},{headers:{Authorization:\"Bearer \".concat(token)}});// The updated attraction is then updated in the visit details.\n// The updated attraction is reversed so that the most recent attraction is displayed first.\nconst updatedAttractions=visitDetails.userAttractions.reverse().map(attraction=>attraction.id===updatedAttraction.id?updatedAttraction:attraction);// The updated attractions are then set in the visit details.\nsetVisitDetails(prevDetails=>({...prevDetails,userAttractions:updatedAttractions}));// The edit attraction modal is then closed.\nhandleCloseEditAttractionModal();}catch(error){console.error(\"Error updating attraction: \",error);}};// The handleDeleteAttraction function is used to delete an attraction from the visit.\nconst handleDeleteAttraction=async attractionId=>{setVisitDetails(prevDetails=>({...prevDetails,userAttractions:prevDetails.userAttractions.filter(attraction=>attraction.id!==attractionId)}));setShowEditAttractionModal(false);// Delete the attraction from the database\ntry{const token=await getAccessTokenSilently();await axios.delete(\"\".concat(process.env.REACT_APP_API_URL,\"/visits/\").concat(visitId,\"/attractions/\").concat(attractionId),{headers:{Authorization:\"Bearer \".concat(token)}});}catch(error){console.error(\"Error deleting attraction: \",error);}};// The handleAddAttraction function is used to add an attraction to the visit.\nconst handleAddAttraction=data=>{setElapsedTime(0);// Reset elapsed time\nsetShowModal(false);// Close the modal immediately\nsetSelectedAttractionData(data);};// The handleStopwatchStop function is used to handle the stopwatch stop event.\nconst handleStopwatchStop=time=>{setElapsedTime(time);};// The handleConfirmSubmit function is used to confirm the submission of the attraction.\nconst handleConfirmSubmit=async()=>{try{const token=await getAccessTokenSilently();// console.log(\"Selected Attraction Data: \", selectedAttractionData);\nawait axios.post(\"\".concat(process.env.REACT_APP_API_URL,\"/visits/\").concat(visitId,\"/attractions\"),{attractionId:selectedAttractionData.attraction.id,timeOfDay:getTimeofDay(),actualWaitTime:elapsedTime,postedWaitTime:selectedAttractionData.attraction.queue.STANDBY.waitTime,attractionName:selectedAttractionData.attraction.name,fastpass:selectedAttractionData.fastpass,singleRider:selectedAttractionData.singleRider,brokeDown:breakdownTime>0?true:false,breakdownTime:breakdownTime},{headers:{Authorization:\"Bearer \".concat(token)}});setVisitDetails(prevDetails=>({...prevDetails,userAttractions:[...prevDetails.userAttractions,{attractionId:selectedAttractionData.attraction.id,timeOfDay:getTimeofDay(),actualWaitTime:elapsedTime,postedWaitTime:selectedAttractionData.attraction.queue.STANDBY.waitTime,attractionName:selectedAttractionData.attraction.name,fastpass:selectedAttractionData.fastpass,singleRider:selectedAttractionData.singleRider,brokeDown:breakdownTime>0?true:false,breakdownTime:breakdownTime}].reverse()}));const updatedVisitDetails=await getVisitDetails(visitId,getAccessTokenSilently);updatedVisitDetails.userAttractions.reverse();setVisitDetails(updatedVisitDetails);// Reset the state and close modals\nsetSelectedAttractionData(null);setElapsedTime(0);// Reset elapsed time\nsetBreakdownTime(0);// Reset breakdown time\nsetShowConfirmationModal(false);}catch(error){console.error(\"Error adding attraction: \",error);}};const handleBreakdownTimeChange=time=>setBreakdownTime(time);// The following conditional statement is used to display a loading message while the page is loading.\nif(loadingPage){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});// Loading placeholder for page\n}// console.log(\"showeditmodal status: \", showEditAttractionModal);\n// The return statement below is used to return the JSX for the VisitPage component.\nreturn/*#__PURE__*/_jsx(PageTransition,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"visit-page-container \".concat(showModal||showConfirmationModal?\"blurred\":\"\"),children:[/*#__PURE__*/_jsx(\"button\",{onClick:goToDashboard,className:\"back-button\",children:\"\\u2190\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:parkName}),/*#__PURE__*/_jsx(\"button\",{className:\"big-button\",onClick:handleOpenModal,children:\"Add Attraction\"}),/*#__PURE__*/_jsx(Modal,{show:showModal,onClose:handleCloseModal,children:loadingAttractions?/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}):/*#__PURE__*/_jsx(AttractionsList// Here we pass the attractions we loaded, the handleAddAttraction function, the setElapsedTime function, and the setShowConfirmationModal function to the AttractionsList component.\n,{attractions:attractions,onAddAttraction:handleAddAttraction,setElapsedTime:setElapsedTime,setShowConfirmationModal:setShowConfirmationModal})}),selectedAttractionData&&/*#__PURE__*/_jsxs(\"div\",{className:\"stopwatch-container\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"currently-timing\",children:\" Currently Timing \"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:\"currently-timing-attraction\",children:selectedAttractionData.attraction.name}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"currently-timing-waitTime\",children:[\"Posted Wait Time:\",\" \",selectedAttractionData.attraction.queue.STANDBY.waitTime,\" \",\"minutes\",\" \"]})]}),/*#__PURE__*/_jsx(Stopwatch,{onStop:handleStopwatchStop,postedWaitTime:selectedAttractionData.attraction.queue.STANDBY.waitTime,onBreakdownTimeChange:handleBreakdownTimeChange}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:handleShowConfirmationModal,children:\"Submit\"})]}),/*#__PURE__*/_jsx(ConfirmationModal,{show:showConfirmationModal,onClose:handleCloseConfirmationModal,onConfirm:handleConfirmSubmit,elapsedTime:elapsedTime}),/*#__PURE__*/_jsx(EditAttractionModal,{show:showEditAttractionModal,onClose:handleCloseEditAttractionModal,attraction:selectedAttraction,onSave:handleSaveAttraction,onDelete:handleDeleteAttraction}),visitDetails?/*#__PURE__*/_jsxs(\"div\",{className:\"visited-attractions-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Visited Attractions\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"attractions-list\",children:visitDetails.userAttractions.map(attraction=>/*#__PURE__*/_jsxs(\"li\",{className:\"visited-attraction-item\",onClick:()=>handleShowEditAttractionModal(attraction),children:[/*#__PURE__*/_jsx(\"span\",{className:\"attraction-name\",children:attraction.attractionName}),/*#__PURE__*/_jsxs(\"ul\",{className:\"attraction-details\",children:[attraction.fastpass?\"⚡\":\"\",\" \",attraction.singleRider?\"🙋\":\"\",\" \",attraction.brokeDown?\"🔨\":\"\",attraction.fastpass||attraction.singleRider||attraction.brokeDown?/*#__PURE__*/_jsx(\"br\",{}):null,attraction.timeOfDay?\"\".concat(attraction.timeOfDay):\"\",/*#__PURE__*/_jsx(\"br\",{}),\"Posted Wait Time: \",attraction.postedWaitTime,\" minutes\",\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Actual wait time \",/*#__PURE__*/_jsx(\"br\",{}),\" \",formatTime(attraction.actualWaitTime),\" \",/*#__PURE__*/_jsx(\"br\",{}),attraction.brokeDown?/*#__PURE__*/_jsxs(_Fragment,{children:[\"Breakdown time: \",formatTime(attraction.breakdownTime)]}):null]})]},attraction.id))})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"}),/*#__PURE__*/_jsx(DeleteVisitModal,{show:showDeleteModal,onClose:handleCloseDeleteModal,handleDeleteVisit:handleDeleteVisit// Pass the function correctly\n}),/*#__PURE__*/_jsx(\"button\",{className:\"delete-button\",onClick:handleShowDeleteModal,children:\"delete this visit\"}),/*#__PURE__*/_jsxs(BreakdownTimerModal,{children:[\"show=\",false,\"onClose=\",()=>{},\"breakdownTime=\",breakdownTime,\"setBreakDownTime=\",setBreakdownTime]}),/*#__PURE__*/_jsx(\"button\",{className:\"info-button\",onClick:handleShowInfoModal,children:\"\\u2754\"}),/*#__PURE__*/_jsx(InfoModal,{show:showInfoModal,onClose:handleCloseInfoModal})]})});};export default VisitPage;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","axios","useAuth0","AttractionsList","Stopwatch","Modal","ConfirmationModal","EditAttractionModal","DeleteVisitModal","BreakdownTimerModal","InfoModal","formatTime","getTimeofDay","PageTransition","getVisitDetails","getVisitAttractions","getVisitsByUserId","deleteVisit","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","VisitPage","visitId","state","getAccessTokenSilently","user","navigate","showModal","setShowModal","visitDetails","setVisitDetails","showEditAttractionModal","setShowEditAttractionModal","showConfirmationModal","setShowConfirmationModal","showDeleteModal","setShowDeleteModal","showInfoModal","setShowInfoModal","selectedAttractionData","setSelectedAttractionData","selectedAttraction","setSelectedAttraction","breakdownTime","setBreakdownTime","elapsedTime","setElapsedTime","parkName","setParkName","attractions","setAttractions","loadingPage","setLoadingPage","loadingAttractions","setLoadingAttractions","fetchVisitDetails","data","error","console","log","fetchAttractions","sortedAttractions","sort","a","b","name","localeCompare","Date","intervalId","setInterval","clearInterval","handleOpenModal","handleCloseModal","handleShowConfirmationModal","handleCloseConfirmationModal","handleShowEditAttractionModal","attraction","handleCloseEditAttractionModal","handleShowDeleteModal","handleCloseDeleteModal","handleShowInfoModal","handleCloseInfoModal","handleDeleteVisit","goToDashboard","visits","handleSaveAttraction","updatedAttraction","token","updatedAttractionPayload","id","timeOfDay","actualWaitTime","postedWaitTime","attractionName","fastpass","singleRider","brokeDown","put","concat","process","env","REACT_APP_API_URL","headers","Authorization","updatedAttractions","userAttractions","reverse","map","prevDetails","handleDeleteAttraction","attractionId","filter","delete","handleAddAttraction","handleStopwatchStop","time","handleConfirmSubmit","post","queue","STANDBY","waitTime","updatedVisitDetails","handleBreakdownTimeChange","children","className","onClick","show","onClose","onAddAttraction","onStop","onBreakdownTimeChange","onConfirm","onSave","onDelete"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/pages/VisitPage.js"],"sourcesContent":["// The visit page is used to display a user's visit and allows them to add, edit, and delete attractions from their visit.\r\n\r\n// The following imports are required for this page:\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// The following components are imported from the components directory:\r\nimport AttractionsList from \"../components/Lists/AttractionsList\";\r\nimport Stopwatch from \"../components/Timers/stopwatch\";\r\n\r\n// The following components are imported from the components/Modals directory:\r\nimport Modal from \"../components/Modals/Modal\";\r\nimport ConfirmationModal from \"../components/Modals/ConfirmationModal\";\r\nimport EditAttractionModal from \"../components/Modals/EditAttractionModal\";\r\nimport DeleteVisitModal from \"../components/Modals/DeleteVisitModal\";\r\nimport BreakdownTimerModal from \"../components/Modals/BreakdownTimerModal\";\r\nimport InfoModal from \"../components/Modals/InfoModal\";\r\n\r\n// The following services are imported from the services directory:\r\nimport { formatTime } from \"../services/Time Stuff/formatTime\";\r\nimport getTimeofDay from \"../services/Time Stuff/getTimeofDay\";\r\nimport PageTransition from \"../services/Cosmetic/pageTransition\";\r\nimport {\r\n  getVisitDetails,\r\n  getVisitAttractions,\r\n  getVisitsByUserId,\r\n  deleteVisit,\r\n} from \"../services/API Calls/VisitService\";\r\n\r\n// The following styles are imported from the Styles directory:\r\nimport \"../Styles/VisitPage.css\";\r\nimport \"../Styles/Button.css\";\r\nimport \"../Styles/Fonts.css\";\r\n\r\n// The VisitPage component is a functional component that will display a user's visit and allow them to add, edit, and delete attractions from their visit.\r\nconst VisitPage = () => {\r\n  // The variables below are all dependent on React hooks.\r\n  const { visitId } = useParams();\r\n  const { state } = useLocation();\r\n  const { getAccessTokenSilently, user } = useAuth0();\r\n  const navigate = useNavigate();\r\n\r\n  // The variables below are used to manage the state of modal components.\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [visitDetails, setVisitDetails] = useState(state?.visitDetails || null);\r\n  const [showEditAttractionModal, setShowEditAttractionModal] = useState(false);\r\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n  const [showInfoModal, setShowInfoModal] = useState(false);\r\n\r\n\r\n  // The variables below are used to manage the state of selected attractions that are being added / deleted.\r\n  const [selectedAttractionData, setSelectedAttractionData] = useState(null);\r\n  const [selectedAttraction, setSelectedAttraction] = useState(null);\r\n  const [breakdownTime, setBreakdownTime] = useState(0);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [parkName, setParkName] = useState(null);\r\n  const [attractions, setAttractions] = useState([]);\r\n  const [loadingPage, setLoadingPage] = useState(!state?.visitDetails);\r\n  const [loadingAttractions, setLoadingAttractions] = useState(true);\r\n\r\n  // The useEffect hook below is used to fetch visit details based on the state of the visit.\r\n  // If the visit details are not present, the visit details are fetched.\r\n  // Otherwise, the loading page is set to false and the visit details are displayed.\r\n  useEffect(() => {\r\n    if (!state?.visitDetails) {\r\n      const fetchVisitDetails = async () => {\r\n        try {\r\n          const data = await getVisitDetails(visitId, getAccessTokenSilently);\r\n          setVisitDetails(data);\r\n          setLoadingPage(false);\r\n        } catch (error) {\r\n          console.error(\"Error fetching visit details:\", error);\r\n          setLoadingPage(false);\r\n        }\r\n      };\r\n      fetchVisitDetails();\r\n    }\r\n  }, [visitId, getAccessTokenSilently, state]); // The useEffect hook is dependent on the visitId, getAccessTokenSilently, and state variables.\r\n\r\n  // The useEffect hook below is used to set the park name based on the visit details.\r\n  // This is used to display the park name on the visit page.\r\n  useEffect(() => {\r\n    if (visitDetails) {\r\n      setParkName(visitDetails.parkName);\r\n      // console.log(\"Park name set: \", visitDetails.parkName);\r\n    }\r\n  }, [visitDetails]); // The useEffect hook is dependent on the visitDetails variable.\r\n\r\n  // The useEffect hook below is used to fetch attractions based on the visitId.\r\n  // If the attractions are not present, the attractions are fetched.\r\n  // Otherwise, the loading attractions is set to false and the attractions are displayed.\r\n  useEffect(() => {\r\n    console.log(\"Visit ID: \", visitId);\r\n    const fetchAttractions = async () => {\r\n      try {\r\n        console.log(\"Fetching attractions...\");\r\n        const data = await getVisitAttractions(visitId, getAccessTokenSilently);\r\n        const sortedAttractions = data.sort(\r\n          (a, b) => a.name.localeCompare(b.name)\r\n        );\r\n        setAttractions(sortedAttractions);\r\n        setLoadingAttractions(false); // Data is ready\r\n      } catch (error) {\r\n        console.error(\"Error fetching attractions: \", error);\r\n        setLoadingAttractions(false); // Error occurred, stop loading\r\n      }\r\n    };\r\n\r\n    console.log(\"Initial fetch at: \", new Date());\r\n    fetchAttractions(); // Initial fetch\r\n    const intervalId = setInterval(() => {\r\n      console.log(\"Fetching at interval @ \", new Date());\r\n      fetchAttractions();\r\n    }, 300000); // 10 seconds\r\n\r\n    return () => {\r\n      console.log(\"Clearing interval @ \", new Date());\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [visitId, getAccessTokenSilently]); // The useEffect hook is dependent on the visitId and getAccessTokenSilently variables.\r\n  // The handleOpenModal function is used to open the modal component.\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  // The handleCloseModal function is used to close the modal component.\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  // The handleShowConfirmationModal function is used to show the confirmation modal component.\r\n  const handleShowConfirmationModal = () => {\r\n    setShowConfirmationModal(true);\r\n  };\r\n  // The handleCloseConfirmationModal function is used to close the confirmation modal component.\r\n  const handleCloseConfirmationModal = () => {\r\n    setShowConfirmationModal(false);\r\n  };\r\n\r\n  // The handleShowEditAttractionModal function is used to show the edit attraction modal component.\r\n  // It also sets the selected attraction to the attraction that is being edited so that it can be displayed in the modal.\r\n  const handleShowEditAttractionModal = (attraction) => {\r\n    setShowEditAttractionModal(true);\r\n    setSelectedAttraction(attraction);\r\n  };\r\n\r\n  // The handleCloseEditAttractionModal function is used to close the edit attraction modal component.\r\n  const handleCloseEditAttractionModal = () => {\r\n    setShowEditAttractionModal(false);\r\n  };\r\n\r\n  // The handleShowDeleteModal function is used to show the delete visit modal component.\r\n  const handleShowDeleteModal = () => {\r\n    setShowDeleteModal(true);\r\n  };\r\n\r\n  // The handleCloseDeleteModal function is used to close the delete visit modal component.\r\n  const handleCloseDeleteModal = () => {\r\n    setShowDeleteModal(false);\r\n  };\r\n\r\n  const handleShowInfoModal = () => {\r\n    setShowInfoModal(true);\r\n  };\r\n\r\n  const handleCloseInfoModal = () => {\r\n    setShowInfoModal(false);\r\n  };\r\n\r\n  // The handleDeleteVisit function is used to delete the visit entirely.\r\n  const handleDeleteVisit = async () => {\r\n    try {\r\n      await deleteVisit(visitId, getAccessTokenSilently);\r\n      goToDashboard();\r\n    } catch (error) {\r\n      console.error(\"Error deleting visit: \", error);\r\n    }\r\n  };\r\n\r\n  // The following function is used to make naviagtion to the dashboard page easier:\r\n  // It fetches the details of the user's visits and navigates to the dashboard page.\r\n  const goToDashboard = async () => {\r\n    try {\r\n      const data = await getVisitsByUserId(user, getAccessTokenSilently);\r\n      navigate(\"/dashboard\", { state: { visits: data } });\r\n    } catch (error) {\r\n      console.error(\"Error fetching user visits: \", error);\r\n    }\r\n  };\r\n\r\n  // The handleSaveAttraction function is used to save the updated attraction details.\r\n  // It updates the attraction details in the database and updates the visit details with the new attraction details.\r\n  const handleSaveAttraction = async (updatedAttraction) => {\r\n    // console.log(\"Updated attraction: \", updatedAttraction);\r\n    try {\r\n      const token = await getAccessTokenSilently();\r\n      // console.log(\"Token: \", token);\r\n      // console.log(\"Updated attraction: \", updatedAttraction.id);\r\n\r\n      // the payload is updated to match the format of the database\r\n      const updatedAttractionPayload = {\r\n        id: updatedAttraction.id,\r\n        timeOfDay: updatedAttraction.timeOfDay,\r\n        actualWaitTime: updatedAttraction.actualWaitTime * 60,\r\n        postedWaitTime: updatedAttraction.postedWaitTime,\r\n        attractionName: updatedAttraction.attractionName,\r\n        fastpass: updatedAttraction.fastpass,\r\n        singleRider: updatedAttraction.singleRider,\r\n        brokeDown: updatedAttraction.brokeDown,\r\n      };\r\n\r\n      // The updated attraction is sent to the database to be updated.\r\n      await axios.put(\r\n        `${process.env.REACT_APP_API_URL}/visits/${visitId}/attractions/${updatedAttraction.id}`,\r\n        {\r\n          ...updatedAttractionPayload,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      // The updated attraction is then updated in the visit details.\r\n      // The updated attraction is reversed so that the most recent attraction is displayed first.\r\n      const updatedAttractions = visitDetails.userAttractions\r\n        .reverse()\r\n        .map((attraction) =>\r\n          attraction.id === updatedAttraction.id\r\n            ? updatedAttraction\r\n            : attraction\r\n        );\r\n\r\n      // The updated attractions are then set in the visit details.\r\n      setVisitDetails((prevDetails) => ({\r\n        ...prevDetails,\r\n        userAttractions: updatedAttractions,\r\n      }));\r\n\r\n      // The edit attraction modal is then closed.\r\n      handleCloseEditAttractionModal();\r\n    } catch (error) {\r\n      console.error(\"Error updating attraction: \", error);\r\n    }\r\n  };\r\n\r\n  // The handleDeleteAttraction function is used to delete an attraction from the visit.\r\n  const handleDeleteAttraction = async (attractionId) => {\r\n    setVisitDetails((prevDetails) => ({\r\n      ...prevDetails,\r\n      userAttractions: prevDetails.userAttractions.filter(\r\n        (attraction) => attraction.id !== attractionId\r\n      ),\r\n    }));\r\n    setShowEditAttractionModal(false);\r\n\r\n    // Delete the attraction from the database\r\n    try {\r\n      const token = await getAccessTokenSilently();\r\n      await axios.delete(\r\n        `${process.env.REACT_APP_API_URL}/visits/${visitId}/attractions/${attractionId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error deleting attraction: \", error);\r\n    }\r\n  };\r\n\r\n  // The handleAddAttraction function is used to add an attraction to the visit.\r\n  const handleAddAttraction = (data) => {\r\n    setElapsedTime(0); // Reset elapsed time\r\n    setShowModal(false); // Close the modal immediately\r\n    setSelectedAttractionData(data);\r\n  };\r\n\r\n\r\n\r\n  // The handleStopwatchStop function is used to handle the stopwatch stop event.\r\n  const handleStopwatchStop = (time) => {\r\n    setElapsedTime(time);\r\n  };\r\n\r\n  // The handleConfirmSubmit function is used to confirm the submission of the attraction.\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      const token = await getAccessTokenSilently();\r\n\r\n      // console.log(\"Selected Attraction Data: \", selectedAttractionData);\r\n      await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/visits/${visitId}/attractions`,\r\n        {\r\n          attractionId: selectedAttractionData.attraction.id,\r\n          timeOfDay: getTimeofDay(),\r\n          actualWaitTime: elapsedTime,\r\n          postedWaitTime:\r\n            selectedAttractionData.attraction.queue.STANDBY.waitTime,\r\n          attractionName: selectedAttractionData.attraction.name,\r\n          fastpass: selectedAttractionData.fastpass,\r\n          singleRider: selectedAttractionData.singleRider,\r\n          brokeDown: breakdownTime > 0 ? true : false,\r\n          breakdownTime: breakdownTime,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      setVisitDetails((prevDetails) => ({\r\n        ...prevDetails,\r\n        userAttractions: [\r\n          ...prevDetails.userAttractions,\r\n          {\r\n            attractionId: selectedAttractionData.attraction.id,\r\n            timeOfDay: getTimeofDay(),\r\n            actualWaitTime: elapsedTime,\r\n            postedWaitTime:\r\n              selectedAttractionData.attraction.queue.STANDBY.waitTime,\r\n            attractionName: selectedAttractionData.attraction.name,\r\n            fastpass: selectedAttractionData.fastpass,\r\n            singleRider: selectedAttractionData.singleRider,\r\n            brokeDown: breakdownTime > 0 ? true : false,\r\n            breakdownTime: breakdownTime,\r\n          },\r\n        ].reverse(),\r\n      }));\r\n      const updatedVisitDetails = await getVisitDetails(\r\n        visitId,\r\n        getAccessTokenSilently\r\n      );\r\n      updatedVisitDetails.userAttractions.reverse();\r\n      setVisitDetails(updatedVisitDetails);\r\n\r\n      // Reset the state and close modals\r\n      setSelectedAttractionData(null);\r\n      setElapsedTime(0); // Reset elapsed time\r\n      setBreakdownTime(0); // Reset breakdown time\r\n      setShowConfirmationModal(false);\r\n    } catch (error) {\r\n      console.error(\"Error adding attraction: \", error);\r\n    }\r\n  };\r\n\r\n  const handleBreakdownTimeChange = (time) => setBreakdownTime(time);\r\n\r\n  // The following conditional statement is used to display a loading message while the page is loading.\r\n  if (loadingPage) {\r\n    return <div>Loading...</div>; // Loading placeholder for page\r\n  }\r\n\r\n  // console.log(\"showeditmodal status: \", showEditAttractionModal);\r\n\r\n  // The return statement below is used to return the JSX for the VisitPage component.\r\n  return (\r\n    <PageTransition>\r\n      <div\r\n        className={`visit-page-container ${\r\n          showModal || showConfirmationModal ? \"blurred\" : \"\"\r\n        }`}\r\n      >\r\n        {/* The button below is used to navigate to the dashboard page, it loads the user's visits and navigates to the dashboard page. */}\r\n        <button onClick={goToDashboard} className=\"back-button\">\r\n        ←\r\n        </button>\r\n        <h1 className=\"title\">{parkName}</h1>\r\n        {/* The button below is used to open the add attraction modal. It presents a list of attractions that the user can add to their visit.  */}\r\n        {/* This is done with the AttractionsList component. */}\r\n        <button className=\"big-button\" onClick={handleOpenModal}>\r\n          Add Attraction\r\n        </button>\r\n        <Modal show={showModal} onClose={handleCloseModal}>\r\n          {/* When the attractions are loaded, the AttractionsList component is displayed. */}\r\n          {loadingAttractions ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <AttractionsList\r\n              // Here we pass the attractions we loaded, the handleAddAttraction function, the setElapsedTime function, and the setShowConfirmationModal function to the AttractionsList component.\r\n              attractions={attractions}\r\n              onAddAttraction={handleAddAttraction}\r\n              setElapsedTime={setElapsedTime}\r\n              setShowConfirmationModal={setShowConfirmationModal}\r\n            />\r\n          )}\r\n        </Modal>\r\n\r\n        {/* If a selected attraction is present, the stopwatch component is displayed: In order to time the wait time. */}\r\n        {selectedAttractionData && (\r\n          <div className=\"stopwatch-container\">\r\n            <h3>\r\n              <span className=\"currently-timing\"> Currently Timing </span>{\" \"}\r\n              <br></br>\r\n              <span className=\"currently-timing-attraction\">\r\n                {selectedAttractionData.attraction.name}\r\n              </span>\r\n              <br></br>\r\n              <span className=\"currently-timing-waitTime\">\r\n                Posted Wait Time:{\" \"}\r\n                {selectedAttractionData.attraction.queue.STANDBY.waitTime}{\" \"}\r\n                minutes{\" \"}\r\n              </span>\r\n            </h3>\r\n            <Stopwatch\r\n              onStop={handleStopwatchStop}\r\n              postedWaitTime={\r\n                selectedAttractionData.attraction.queue.STANDBY.waitTime\r\n              }\r\n              onBreakdownTimeChange={handleBreakdownTimeChange}\r\n            />\r\n            {/* The button below is used to submit the time. */}\r\n            <button className=\"button\" onClick={handleShowConfirmationModal}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n        {/* The confirmationModal is called when the user tries to submit a time. It asks the user to confirm the time they are submitting. */}\r\n        <ConfirmationModal\r\n          show={showConfirmationModal}\r\n          onClose={handleCloseConfirmationModal}\r\n          onConfirm={handleConfirmSubmit}\r\n          elapsedTime={elapsedTime}\r\n        />\r\n        {/* The editAttractionModal is used to edit an attraction's posted / wait time, fastpass, single-rider, and broken status. */}\r\n        <EditAttractionModal\r\n          show={showEditAttractionModal}\r\n          onClose={handleCloseEditAttractionModal}\r\n          attraction={selectedAttraction}\r\n          onSave={handleSaveAttraction}\r\n          onDelete={handleDeleteAttraction}\r\n        />\r\n\r\n        {/* The following conditional statement is used to display a message if no attractions are found. */}\r\n        {/* If there are attractions in the visit, the visited attractions are displayed in a list with the most recent attraction displayed first. */}\r\n        {visitDetails ? (\r\n          <div className=\"visited-attractions-container\">\r\n            <h2>Visited Attractions</h2>\r\n            <ul className=\"attractions-list\">\r\n              {visitDetails.userAttractions.map((attraction) => (\r\n                <li\r\n                  key={attraction.id}\r\n                  className=\"visited-attraction-item\"\r\n                  onClick={() => handleShowEditAttractionModal(attraction)}\r\n                >\r\n                  <span className=\"attraction-name\">\r\n                    {attraction.attractionName}\r\n                  </span>\r\n                  <ul className=\"attraction-details\">\r\n                    {attraction.fastpass ? \"⚡\" : \"\"}{\" \"}\r\n                    {attraction.singleRider ? \"🙋\" : \"\"}{\" \"}\r\n                    {attraction.brokeDown ? \"🔨\" : \"\"}\r\n                    {attraction.fastpass || attraction.singleRider || attraction.brokeDown ? <br /> : null}\r\n                    {attraction.timeOfDay\r\n                      ? `${attraction.timeOfDay}`\r\n                      : \"\"}\r\n                    <br></br>Posted Wait Time: {attraction.postedWaitTime} minutes{\" \"}\r\n                    <br></br>\r\n                    Actual wait time <br></br> {formatTime(\r\n                      attraction.actualWaitTime\r\n                    )}{\" \"}\r\n                    <br></br>\r\n                    {attraction.brokeDown ? (\r\n                      <>\r\n                        Breakdown time: {formatTime(attraction.breakdownTime)}\r\n                      </>\r\n                    ) : null}\r\n                  </ul>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ) : (\r\n          <p>Loading...</p>\r\n        )}\r\n\r\n        {/* The deleteVisitModal is used to delete the visit entirely. */}\r\n        <DeleteVisitModal\r\n          show={showDeleteModal}\r\n          onClose={handleCloseDeleteModal}\r\n          handleDeleteVisit={handleDeleteVisit} // Pass the function correctly\r\n        />\r\n\r\n        <button className=\"delete-button\" onClick={handleShowDeleteModal}>\r\n          delete this visit\r\n        </button>\r\n\r\n\r\n\r\n        <BreakdownTimerModal>\r\n          show={false}\r\n          onClose={() => {}}\r\n          breakdownTime={breakdownTime}\r\n          setBreakDownTime={setBreakdownTime}\r\n        </BreakdownTimerModal>\r\n\r\n        <button className=\"info-button\" onClick={handleShowInfoModal}>\r\n        ❔\r\n        </button>\r\n        <InfoModal show={showInfoModal} onClose={handleCloseInfoModal}> \r\n        </InfoModal>\r\n      </div>\r\n    </PageTransition>\r\n  );\r\n};\r\n\r\nexport default VisitPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}