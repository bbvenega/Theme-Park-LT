{"ast":null,"code":"// CircleTimer is a component that displays a circular timer. \n// As the elapsedTime increases, the circular timer will fill up. The component will display the time in hours, minutes, and seconds.\n// The closer the time gets to the posted wait time, the color of the circular timer will change from green to red.\nimport React,{useEffect,useState}from'react';import'../../Styles/CircularTimer.css';// CircularTimer takes in the duration and elapsedTime as props.\n// The duration prop is used to set the total time for the timer.\n// The elapsedTime prop is used to set the time elapsed.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CircularTimer=_ref=>{let{duration,elapsedTime}=_ref;const[startLoading,setStartLoading]=useState(true);// The useEffect hook is used to set the startLoading state to false after 2 seconds.\n// This is used for the small animation when the user first selects an attraction.\nuseEffect(()=>{const timer=setTimeout(()=>setStartLoading(false),2000);return()=>clearTimeout(timer);},[]);// The variables below are used to design the circle timer.\nconst radius=100;const circumference=2*Math.PI*radius;const strokeDasharray=startLoading?circumference/10:circumference;const currentProgress=Math.min(elapsedTime/duration,1);const offset=circumference-currentProgress*circumference;const startColor={r:77,g:171,b:117};const endColor={r:207,g:77,b:76};const color=\"rgb(\\n    \".concat(Math.floor(startColor.r+currentProgress*(endColor.r-startColor.r)),\", \\n    \").concat(Math.floor(startColor.g+currentProgress*(endColor.g-startColor.g)),\", \\n    \").concat(Math.floor(startColor.b+currentProgress*(endColor.b-startColor.b)),\"\\n  )\");// The formatTime function is used to format the time in hours, minutes, and seconds.\nconst formatTime=time=>{const seconds=Math.floor(time%60);const minutes=Math.floor(time/60%60);const hours=Math.floor(time/3600);return\"\".concat(hours>0?\"\".concat(hours,\":\"):'').concat(minutes>9?minutes:\"0\".concat(minutes),\":\").concat(seconds>9?seconds:\"0\".concat(seconds));};// The return statement below will render the CircularTimer component.\nreturn/*#__PURE__*/ (// White circle: The background of the timer.\n_jsxs(\"div\",{className:\"timer-container\",children:[/*#__PURE__*/_jsxs(\"svg\",{className:\"circular-timer\",width:\"250\",height:\"250\",children:[/*#__PURE__*/_jsx(\"circle\",{className:\"timer-background\",cx:\"125\",cy:\"125\",r:radius,strokeWidth:\"30\"}),/*#__PURE__*/_jsx(\"circle\",{className:\"timer-progress \".concat(startLoading?'loading':''),cx:\"125\",cy:\"125\",r:radius,strokeWidth:\"35\",style:{strokeDasharray:\"\".concat(strokeDasharray,\" \").concat(circumference),strokeDashoffset:offset,stroke:color}}),!startLoading&&/*#__PURE__*/_jsx(\"circle\",{// className=\"timer-dot\"\ncx:\"225\",cy:\"125\",r:\"17\",fill:color})]}),/*#__PURE__*/_jsx(\"div\",{className:\"timer-text\",children:formatTime(elapsedTime)})]}));};export default CircularTimer;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","CircularTimer","_ref","duration","elapsedTime","startLoading","setStartLoading","timer","setTimeout","clearTimeout","radius","circumference","Math","PI","strokeDasharray","currentProgress","min","offset","startColor","r","g","b","endColor","color","concat","floor","formatTime","time","seconds","minutes","hours","className","children","width","height","cx","cy","strokeWidth","style","strokeDashoffset","stroke","fill"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Timers/CircularTimer.js"],"sourcesContent":["// CircleTimer is a component that displays a circular timer. \r\n// As the elapsedTime increases, the circular timer will fill up. The component will display the time in hours, minutes, and seconds.\r\n// The closer the time gets to the posted wait time, the color of the circular timer will change from green to red.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../../Styles/CircularTimer.css';\r\n\r\n// CircularTimer takes in the duration and elapsedTime as props.\r\n// The duration prop is used to set the total time for the timer.\r\n// The elapsedTime prop is used to set the time elapsed.\r\nconst CircularTimer = ({ duration, elapsedTime }) => {\r\n  const [startLoading, setStartLoading] = useState(true);\r\n\r\n  // The useEffect hook is used to set the startLoading state to false after 2 seconds.\r\n  // This is used for the small animation when the user first selects an attraction.\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setStartLoading(false), 2000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  // The variables below are used to design the circle timer.\r\n  const radius = 100;\r\n  const circumference = 2 * Math.PI * radius;\r\n  const strokeDasharray = startLoading ? circumference / 10 : circumference;\r\n\r\n  const currentProgress = Math.min(elapsedTime / duration, 1);\r\n  const offset = circumference - currentProgress * circumference;\r\n\r\n  const startColor = { r: 77, g: 171, b: 117};\r\n  const endColor = { r: 207, g: 77, b: 76 };\r\n\r\n  const color = `rgb(\r\n    ${Math.floor(startColor.r + currentProgress * (endColor.r - startColor.r))}, \r\n    ${Math.floor(startColor.g + currentProgress * (endColor.g - startColor.g))}, \r\n    ${Math.floor(startColor.b + currentProgress * (endColor.b - startColor.b))}\r\n  )`;\r\n\r\n  // The formatTime function is used to format the time in hours, minutes, and seconds.\r\n  const formatTime = (time) => {\r\n    const seconds = Math.floor(time % 60);\r\n    const minutes = Math.floor((time / 60) % 60);\r\n    const hours = Math.floor(time / 3600);\r\n    return `${hours > 0 ? `${hours}:` : ''}${\r\n      minutes > 9 ? minutes : `0${minutes}`\r\n    }:${seconds > 9 ? seconds : `0${seconds}`}`;\r\n  };\r\n\r\n  // The return statement below will render the CircularTimer component.\r\n  return (\r\n    // White circle: The background of the timer.\r\n    <div className=\"timer-container\">\r\n      <svg className=\"circular-timer\" width=\"250\" height=\"250\">\r\n        <circle\r\n          className=\"timer-background\"\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r={radius}\r\n          strokeWidth=\"30\"\r\n        />\r\n        \r\n        {/* Green Circle: The progress of the timer. */}\r\n        <circle\r\n          className={`timer-progress ${startLoading ? 'loading' : ''}`}\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r={radius}\r\n          strokeWidth=\"35\"\r\n          style={{\r\n            strokeDasharray: `${strokeDasharray} ${circumference}`,\r\n            strokeDashoffset: offset,\r\n            stroke: color,\r\n          }}\r\n        />\r\n        {/* Small dot to finish animation. */}\r\n        {!startLoading && (\r\n          <circle\r\n            // className=\"timer-dot\"\r\n            cx=\"225\"\r\n            cy=\"125\"\r\n            r=\"17\"\r\n            fill={color}\r\n          />\r\n        )}\r\n      </svg>\r\n      <div className=\"timer-text\">{formatTime(elapsedTime)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircularTimer;\r\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,gCAAgC,CAEvC;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,aAAa,CAAGC,IAAA,EAA+B,IAA9B,CAAEC,QAAQ,CAAEC,WAAY,CAAC,CAAAF,IAAA,CAC9C,KAAM,CAACG,YAAY,CAAEC,eAAe,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAEtD;AACA;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,KAAK,CAAGC,UAAU,CAAC,IAAMF,eAAe,CAAC,KAAK,CAAC,CAAE,IAAI,CAAC,CAC5D,MAAO,IAAMG,YAAY,CAACF,KAAK,CAAC,CAClC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,MAAM,CAAG,GAAG,CAClB,KAAM,CAAAC,aAAa,CAAG,CAAC,CAAGC,IAAI,CAACC,EAAE,CAAGH,MAAM,CAC1C,KAAM,CAAAI,eAAe,CAAGT,YAAY,CAAGM,aAAa,CAAG,EAAE,CAAGA,aAAa,CAEzE,KAAM,CAAAI,eAAe,CAAGH,IAAI,CAACI,GAAG,CAACZ,WAAW,CAAGD,QAAQ,CAAE,CAAC,CAAC,CAC3D,KAAM,CAAAc,MAAM,CAAGN,aAAa,CAAGI,eAAe,CAAGJ,aAAa,CAE9D,KAAM,CAAAO,UAAU,CAAG,CAAEC,CAAC,CAAE,EAAE,CAAEC,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAC,CAC3C,KAAM,CAAAC,QAAQ,CAAG,CAAEH,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,EAAE,CAAEC,CAAC,CAAE,EAAG,CAAC,CAEzC,KAAM,CAAAE,KAAK,cAAAC,MAAA,CACPZ,IAAI,CAACa,KAAK,CAACP,UAAU,CAACC,CAAC,CAAGJ,eAAe,EAAIO,QAAQ,CAACH,CAAC,CAAGD,UAAU,CAACC,CAAC,CAAC,CAAC,aAAAK,MAAA,CACxEZ,IAAI,CAACa,KAAK,CAACP,UAAU,CAACE,CAAC,CAAGL,eAAe,EAAIO,QAAQ,CAACF,CAAC,CAAGF,UAAU,CAACE,CAAC,CAAC,CAAC,aAAAI,MAAA,CACxEZ,IAAI,CAACa,KAAK,CAACP,UAAU,CAACG,CAAC,CAAGN,eAAe,EAAIO,QAAQ,CAACD,CAAC,CAAGH,UAAU,CAACG,CAAC,CAAC,CAAC,SAC1E,CAEF;AACA,KAAM,CAAAK,UAAU,CAAIC,IAAI,EAAK,CAC3B,KAAM,CAAAC,OAAO,CAAGhB,IAAI,CAACa,KAAK,CAACE,IAAI,CAAG,EAAE,CAAC,CACrC,KAAM,CAAAE,OAAO,CAAGjB,IAAI,CAACa,KAAK,CAAEE,IAAI,CAAG,EAAE,CAAI,EAAE,CAAC,CAC5C,KAAM,CAAAG,KAAK,CAAGlB,IAAI,CAACa,KAAK,CAACE,IAAI,CAAG,IAAI,CAAC,CACrC,SAAAH,MAAA,CAAUM,KAAK,CAAG,CAAC,IAAAN,MAAA,CAAMM,KAAK,MAAM,EAAE,EAAAN,MAAA,CACpCK,OAAO,CAAG,CAAC,CAAGA,OAAO,KAAAL,MAAA,CAAOK,OAAO,CAAE,MAAAL,MAAA,CACnCI,OAAO,CAAG,CAAC,CAAGA,OAAO,KAAAJ,MAAA,CAAOI,OAAO,CAAE,EAC3C,CAAC,CAED;AACA,oBACE;AACA5B,KAAA,QAAK+B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BhC,KAAA,QAAK+B,SAAS,CAAC,gBAAgB,CAACE,KAAK,CAAC,KAAK,CAACC,MAAM,CAAC,KAAK,CAAAF,QAAA,eACtDlC,IAAA,WACEiC,SAAS,CAAC,kBAAkB,CAC5BI,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRjB,CAAC,CAAET,MAAO,CACV2B,WAAW,CAAC,IAAI,CACjB,CAAC,cAGFvC,IAAA,WACEiC,SAAS,mBAAAP,MAAA,CAAoBnB,YAAY,CAAG,SAAS,CAAG,EAAE,CAAG,CAC7D8B,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRjB,CAAC,CAAET,MAAO,CACV2B,WAAW,CAAC,IAAI,CAChBC,KAAK,CAAE,CACLxB,eAAe,IAAAU,MAAA,CAAKV,eAAe,MAAAU,MAAA,CAAIb,aAAa,CAAE,CACtD4B,gBAAgB,CAAEtB,MAAM,CACxBuB,MAAM,CAAEjB,KACV,CAAE,CACH,CAAC,CAED,CAAClB,YAAY,eACZP,IAAA,WACE;AACAqC,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRjB,CAAC,CAAC,IAAI,CACNsB,IAAI,CAAElB,KAAM,CACb,CACF,EACE,CAAC,cACNzB,IAAA,QAAKiC,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEN,UAAU,CAACtB,WAAW,CAAC,CAAM,CAAC,EACxD,CAAC,EAEV,CAAC,CAED,cAAe,CAAAH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}