{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Documents\\\\GitHub\\\\Theme-Park-LT\\\\tp\\\\newfe\\\\src\\\\components\\\\Lists\\\\AttractionsList.js\",\n  _s = $RefreshSig$();\n// This component is used to display a list of attractions and add them to the visit.\n\nimport React, { useState } from \"react\";\n\n// The AttractionsList component is a functional component that will render a list of attractions that a user can add to their visit.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AttractionsList = ({\n  attractions,\n  onAddAttraction,\n  setElapsedTime,\n  setShowConfirmationModal\n}) => {\n  _s();\n  const [selectedAttraction, setSelectedAttraction] = useState(null);\n  const [fastpass, setFastpass] = useState(false);\n  const [singleRider, setSingleRider] = useState(false);\n  const [brokeDown, setBrokeDown] = useState(false);\n\n  // The handleAttractionSelect function is used to select an attraction from the list of attractions.\n  // This is in preparation for adding the attraction to the visit.\n  const handleAttractionSelect = attraction => {\n    // console.log(attraction);\n    setSelectedAttraction(attraction);\n    setFastpass(false);\n    setSingleRider(false);\n    setBrokeDown(false);\n    setElapsedTime(0); // Reset elapsed time for the new attraction\n  };\n\n  // The handleSubmit function is used to add the selected attraction to the visit.\n  const handleSubmit = () => {\n    // console.log(selectedAttraction);\n    if (selectedAttraction) {\n      onAddAttraction({\n        attraction: selectedAttraction,\n        fastpass,\n        singleRider,\n        brokeDown\n      });\n    }\n  };\n\n  // The return statement below will render the AttractionsList component.\n  // The component will display a list of selectable attractions from the visit's theme park that a user can add to their visit.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"h2-attraction-list-title\",\n      children: \"Attractions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), attractions && attractions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"attractions-list\",\n      children: attractions.filter(attraction => attraction.entityType === \"ATTRACTION\" && attraction.status === \"OPERATING\" && attraction.queue && attraction.queue.STANDBY && attraction.queue.STANDBY.waitTime != null && attraction.queue.STANDBY.waitTime !== 0).map(attraction => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `attraction-item ${selectedAttraction === attraction ? \"selected\" : \"\"}`,\n        onClick: () => handleAttractionSelect(attraction),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"attraction-name\",\n          children: attraction.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), \" Live Wait Time:\", \" \", attraction.queue && attraction.queue.STANDBY ? attraction.queue.STANDBY.waitTime : \"N/A\", \" \", \"minutes\"]\n      }, attraction.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No attractions available, ensure your park is open!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), selectedAttraction && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attraction-select-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Attraction:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), selectedAttraction.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: fastpass,\n          onChange: e => setFastpass(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), \"Fastpass?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: singleRider,\n          onChange: e => setSingleRider(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), \"Single Rider?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: handleSubmit,\n        children: \"Add Attraction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(AttractionsList, \"4dYTvRmD1gLI37Cuy6/r3CECogc=\");\n_c = AttractionsList;\nexport default AttractionsList;\nvar _c;\n$RefreshReg$(_c, \"AttractionsList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AttractionsList","attractions","onAddAttraction","setElapsedTime","setShowConfirmationModal","_s","selectedAttraction","setSelectedAttraction","fastpass","setFastpass","singleRider","setSingleRider","brokeDown","setBrokeDown","handleAttractionSelect","attraction","handleSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","length","filter","entityType","status","queue","STANDBY","waitTime","map","onClick","name","id","type","checked","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Lists/AttractionsList.js"],"sourcesContent":["// This component is used to display a list of attractions and add them to the visit.\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// The AttractionsList component is a functional component that will render a list of attractions that a user can add to their visit.\r\nconst AttractionsList = ({\r\n  attractions,\r\n  onAddAttraction,\r\n  setElapsedTime,\r\n  setShowConfirmationModal,\r\n}) => {\r\n  const [selectedAttraction, setSelectedAttraction] = useState(null);\r\n  const [fastpass, setFastpass] = useState(false);\r\n  const [singleRider, setSingleRider] = useState(false);\r\n  const [brokeDown, setBrokeDown] = useState(false);\r\n\r\n  // The handleAttractionSelect function is used to select an attraction from the list of attractions.\r\n  // This is in preparation for adding the attraction to the visit.\r\n  const handleAttractionSelect = (attraction) => {\r\n    // console.log(attraction);\r\n    setSelectedAttraction(attraction);\r\n    setFastpass(false);\r\n    setSingleRider(false);\r\n    setBrokeDown(false);\r\n    setElapsedTime(0); // Reset elapsed time for the new attraction\r\n  };\r\n\r\n  // The handleSubmit function is used to add the selected attraction to the visit.\r\n  const handleSubmit = () => {\r\n    // console.log(selectedAttraction);\r\n    if (selectedAttraction) {\r\n      onAddAttraction({\r\n        attraction: selectedAttraction,\r\n        fastpass,\r\n        singleRider,\r\n        brokeDown,\r\n      });\r\n    }\r\n  };\r\n\r\n  // The return statement below will render the AttractionsList component.\r\n  // The component will display a list of selectable attractions from the visit's theme park that a user can add to their visit.\r\n  return (\r\n    <div>\r\n      <h2 className=\"h2-attraction-list-title\">Attractions</h2>\r\n      {attractions && attractions.length > 0 ? (\r\n        <ul className=\"attractions-list\">\r\n          {attractions\r\n            .filter(\r\n              (attraction) =>\r\n                attraction.entityType === \"ATTRACTION\" &&\r\n                attraction.status === \"OPERATING\" &&\r\n                attraction.queue &&\r\n                attraction.queue.STANDBY &&\r\n                attraction.queue.STANDBY.waitTime != null &&\r\n                attraction.queue.STANDBY.waitTime !== 0\r\n            )\r\n            .map((attraction) => (\r\n              <li\r\n                key={attraction.id}\r\n                className={`attraction-item ${\r\n                  selectedAttraction === attraction ? \"selected\" : \"\"\r\n                }`}\r\n                onClick={() => handleAttractionSelect(attraction)}\r\n              >\r\n                <span className=\"attraction-name\">{attraction.name}</span>{\" \"}\r\n                <br></br> Live Wait Time:{\" \"}\r\n                {attraction.queue && attraction.queue.STANDBY\r\n                  ? attraction.queue.STANDBY.waitTime\r\n                  : \"N/A\"}{\" \"}\r\n                minutes\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No attractions available, ensure your park is open!</p>\r\n      )}\r\n      {selectedAttraction && (\r\n        <div className=\"attraction-select-options\">\r\n          <h3>Selected Attraction: \r\n            <br></br>{selectedAttraction.name}</h3>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={fastpass}\r\n              onChange={(e) => setFastpass(e.target.checked)}\r\n            />\r\n            Fastpass?\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={singleRider}\r\n              onChange={(e) => setSingleRider(e.target.checked)}\r\n            />\r\n            Single Rider?\r\n          </label>\r\n\r\n          <button className=\"button\" onClick={handleSubmit}>\r\n            Add Attraction\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttractionsList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}