{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Documents\\\\GitHub\\\\Theme-Park-LT\\\\tp\\\\newfe\\\\src\\\\components\\\\Timers\\\\stopwatch.js\",\n  _s = $RefreshSig$();\n// The stopwatch component is used to measure the time taken for an attraction to be completed.\n// This is used in combination with the circular timer component to display the time taken for an attraction to be completed.\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CircularTimer from \"./CircularTimer\";\nimport BreakdownTimerModal from \"../Modals/BreakdownTimerModal\";\nimport \"../../Styles/CircularTimer.css\";\n\n// The stopwatch function takes in the onStop, postedWaitTime, and onBreakdownTimeChange props.\n// The onStop prop is used to stop the stopwatch and notify the parent component.\n// The postedWaitTime prop is used to set the posted wait time.\n// The onBreakdownTimeChange prop is used to notify the parent component of the breakdown time.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = ({\n  onStop,\n  postedWaitTime,\n  onBreakdownTimeChange\n}) => {\n  _s();\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showBreakdownModal, setShowBreakdownModal] = useState(false);\n  const [breakdownTime, setBreakdownTime] = useState(0);\n  const timerRef = useRef(null);\n\n  // The useEffect hook is used to update the main timer.\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [isRunning]);\n\n  // The useEffect hook is used to notify the parent component of breakdown time changes.\n  useEffect(() => {\n    onBreakdownTimeChange(breakdownTime);\n  }, [breakdownTime, onBreakdownTimeChange]);\n\n  // The start function is used to start the stopwatch.\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  // The stop function is used to stop the stopwatch.\n  const stop = () => {\n    setIsRunning(false);\n    if (onStop) {\n      onStop(time);\n    }\n  };\n\n  // The reset function is used to reset the stopwatch.\n  const reset = () => {\n    clearInterval(timerRef.current);\n    setIsRunning(false);\n    setTime(0);\n  };\n\n  // The return statement below will render the Stopwatch component.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularTimer, {\n      duration: postedWaitTime * 60,\n      elapsedTime: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: start,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stop-button\",\n        onClick: stop,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: () => setShowBreakdownModal(true),\n        children: \"\\uD83D\\uDEA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BreakdownTimerModal, {\n      show: showBreakdownModal,\n      onClose: () => setShowBreakdownModal(false),\n      breakdownTime: breakdownTime,\n      setBreakdownTime: setBreakdownTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Stopwatch, \"7gAdt1yV0Q1Bx2qemg7QNE7L+oQ=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CircularTimer","BreakdownTimerModal","jsxDEV","_jsxDEV","Stopwatch","onStop","postedWaitTime","onBreakdownTimeChange","_s","time","setTime","isRunning","setIsRunning","showBreakdownModal","setShowBreakdownModal","breakdownTime","setBreakdownTime","timerRef","current","setInterval","prevTime","clearInterval","start","stop","reset","children","duration","elapsedTime","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","show","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Timers/stopwatch.js"],"sourcesContent":["// The stopwatch component is used to measure the time taken for an attraction to be completed.\r\n// This is used in combination with the circular timer component to display the time taken for an attraction to be completed.\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport CircularTimer from \"./CircularTimer\";\r\nimport BreakdownTimerModal from \"../Modals/BreakdownTimerModal\";\r\nimport \"../../Styles/CircularTimer.css\";\r\n\r\n// The stopwatch function takes in the onStop, postedWaitTime, and onBreakdownTimeChange props.\r\n// The onStop prop is used to stop the stopwatch and notify the parent component.\r\n// The postedWaitTime prop is used to set the posted wait time.\r\n// The onBreakdownTimeChange prop is used to notify the parent component of the breakdown time.\r\nconst Stopwatch = ({ onStop, postedWaitTime, onBreakdownTimeChange }) => {\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [showBreakdownModal, setShowBreakdownModal] = useState(false);\r\n  const [breakdownTime, setBreakdownTime] = useState(0);\r\n  const timerRef = useRef(null);\r\n\r\n  // The useEffect hook is used to update the main timer.\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(timerRef.current);\r\n    }\r\n\r\n    return () => clearInterval(timerRef.current);\r\n  }, [isRunning]);\r\n\r\n  // The useEffect hook is used to notify the parent component of breakdown time changes.\r\n  useEffect(() => {\r\n    onBreakdownTimeChange(breakdownTime);\r\n  }, [breakdownTime, onBreakdownTimeChange]);\r\n\r\n  // The start function is used to start the stopwatch.\r\n  const start = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  // The stop function is used to stop the stopwatch.\r\n  const stop = () => {\r\n    setIsRunning(false);\r\n    if (onStop) {\r\n      onStop(time);\r\n    }\r\n  };\r\n\r\n  // The reset function is used to reset the stopwatch.\r\n  const reset = () => {\r\n    clearInterval(timerRef.current);\r\n    setIsRunning(false);\r\n    setTime(0);\r\n  };\r\n\r\n  // The return statement below will render the Stopwatch component.\r\n  return (\r\n    <div>\r\n      <CircularTimer duration={postedWaitTime * 60} elapsedTime={time} />\r\n      <div className=\"buttons-container\">\r\n        <button className=\"button\" onClick={start}>Start</button>\r\n        <button className=\"stop-button\" onClick={stop}>Stop</button>\r\n        <button className=\"button\" onClick={reset}>Reset</button>\r\n        <button className=\"button\" onClick={() => setShowBreakdownModal(true)}>ðŸš§</button>\r\n      </div>\r\n\r\n      <BreakdownTimerModal\r\n        show={showBreakdownModal}\r\n        onClose={() => setShowBreakdownModal(false)}\r\n        breakdownTime={breakdownTime}\r\n        setBreakdownTime={setBreakdownTime}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}