{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Documents\\\\GitHub\\\\Theme-Park-LT\\\\tp\\\\newfe\\\\src\\\\components\\\\Timers\\\\CircularTimer.js\",\n  _s = $RefreshSig$();\n// CircleTimer is a component that displays a circular timer. \n// As the elapsedTime increases, the circular timer will fill up. The component will display the time in hours, minutes, and seconds.\n// The closer the time gets to the posted wait time, the color of the circular timer will change from green to red.\n\nimport React, { useEffect, useState } from 'react';\nimport '../../Styles/CircularTimer.css';\n\n// CircularTimer takes in the duration and elapsedTime as props.\n// The duration prop is used to set the total time for the timer.\n// The elapsedTime prop is used to set the time elapsed.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircularTimer = ({\n  duration,\n  elapsedTime\n}) => {\n  _s();\n  const [startLoading, setStartLoading] = useState(true);\n\n  // The useEffect hook is used to set the startLoading state to false after 2 seconds.\n  // This is used for the small animation when the user first selects an attraction.\n  useEffect(() => {\n    const timer = setTimeout(() => setStartLoading(false), 2000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // The variables below are used to design the circle timer.\n  const radius = 100;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = startLoading ? circumference / 10 : circumference;\n  const currentProgress = Math.min(elapsedTime / duration, 1);\n  const offset = circumference - currentProgress * circumference;\n  const startColor = {\n    r: 77,\n    g: 171,\n    b: 117\n  };\n  const endColor = {\n    r: 207,\n    g: 77,\n    b: 76\n  };\n  const color = `rgb(\n    ${Math.floor(startColor.r + currentProgress * (endColor.r - startColor.r))}, \n    ${Math.floor(startColor.g + currentProgress * (endColor.g - startColor.g))}, \n    ${Math.floor(startColor.b + currentProgress * (endColor.b - startColor.b))}\n  )`;\n\n  // The formatTime function is used to format the time in hours, minutes, and seconds.\n  const formatTime = time => {\n    const seconds = Math.floor(time % 60);\n    const minutes = Math.floor(time / 60 % 60);\n    const hours = Math.floor(time / 3600);\n    return `${hours > 0 ? `${hours}:` : ''}${minutes > 9 ? minutes : `0${minutes}`}:${seconds > 9 ? seconds : `0${seconds}`}`;\n  };\n\n  // The return statement below will render the CircularTimer component.\n  return (\n    /*#__PURE__*/\n    // White circle: The background of the timer.\n    _jsxDEV(\"div\", {\n      className: \"timer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"circular-timer\",\n        width: \"250\",\n        height: \"250\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"timer-background\",\n          cx: \"125\",\n          cy: \"125\",\n          r: radius,\n          strokeWidth: \"30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          className: `timer-progress ${startLoading ? 'loading' : ''}`,\n          cx: \"125\",\n          cy: \"125\",\n          r: radius,\n          strokeWidth: \"35\",\n          style: {\n            strokeDasharray: `${strokeDasharray} ${circumference}`,\n            strokeDashoffset: offset,\n            stroke: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), !startLoading && /*#__PURE__*/_jsxDEV(\"circle\", {\n          // className=\"timer-dot\"\n          cx: \"225\",\n          cy: \"125\",\n          r: \"17\",\n          fill: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-text\",\n        children: formatTime(elapsedTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(CircularTimer, \"ndXeXrp3jOzZeo9OyJfldEJCSzw=\");\n_c = CircularTimer;\nexport default CircularTimer;\nvar _c;\n$RefreshReg$(_c, \"CircularTimer\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CircularTimer","duration","elapsedTime","_s","startLoading","setStartLoading","timer","setTimeout","clearTimeout","radius","circumference","Math","PI","strokeDasharray","currentProgress","min","offset","startColor","r","g","b","endColor","color","floor","formatTime","time","seconds","minutes","hours","className","children","width","height","cx","cy","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","style","strokeDashoffset","stroke","fill","_c","$RefreshReg$"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Timers/CircularTimer.js"],"sourcesContent":["// CircleTimer is a component that displays a circular timer. \r\n// As the elapsedTime increases, the circular timer will fill up. The component will display the time in hours, minutes, and seconds.\r\n// The closer the time gets to the posted wait time, the color of the circular timer will change from green to red.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../../Styles/CircularTimer.css';\r\n\r\n// CircularTimer takes in the duration and elapsedTime as props.\r\n// The duration prop is used to set the total time for the timer.\r\n// The elapsedTime prop is used to set the time elapsed.\r\nconst CircularTimer = ({ duration, elapsedTime }) => {\r\n  const [startLoading, setStartLoading] = useState(true);\r\n\r\n  // The useEffect hook is used to set the startLoading state to false after 2 seconds.\r\n  // This is used for the small animation when the user first selects an attraction.\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setStartLoading(false), 2000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  // The variables below are used to design the circle timer.\r\n  const radius = 100;\r\n  const circumference = 2 * Math.PI * radius;\r\n  const strokeDasharray = startLoading ? circumference / 10 : circumference;\r\n\r\n  const currentProgress = Math.min(elapsedTime / duration, 1);\r\n  const offset = circumference - currentProgress * circumference;\r\n\r\n  const startColor = { r: 77, g: 171, b: 117};\r\n  const endColor = { r: 207, g: 77, b: 76 };\r\n\r\n  const color = `rgb(\r\n    ${Math.floor(startColor.r + currentProgress * (endColor.r - startColor.r))}, \r\n    ${Math.floor(startColor.g + currentProgress * (endColor.g - startColor.g))}, \r\n    ${Math.floor(startColor.b + currentProgress * (endColor.b - startColor.b))}\r\n  )`;\r\n\r\n  // The formatTime function is used to format the time in hours, minutes, and seconds.\r\n  const formatTime = (time) => {\r\n    const seconds = Math.floor(time % 60);\r\n    const minutes = Math.floor((time / 60) % 60);\r\n    const hours = Math.floor(time / 3600);\r\n    return `${hours > 0 ? `${hours}:` : ''}${\r\n      minutes > 9 ? minutes : `0${minutes}`\r\n    }:${seconds > 9 ? seconds : `0${seconds}`}`;\r\n  };\r\n\r\n  // The return statement below will render the CircularTimer component.\r\n  return (\r\n    // White circle: The background of the timer.\r\n    <div className=\"timer-container\">\r\n      <svg className=\"circular-timer\" width=\"250\" height=\"250\">\r\n        <circle\r\n          className=\"timer-background\"\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r={radius}\r\n          strokeWidth=\"30\"\r\n        />\r\n        \r\n        {/* Green Circle: The progress of the timer. */}\r\n        <circle\r\n          className={`timer-progress ${startLoading ? 'loading' : ''}`}\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r={radius}\r\n          strokeWidth=\"35\"\r\n          style={{\r\n            strokeDasharray: `${strokeDasharray} ${circumference}`,\r\n            strokeDashoffset: offset,\r\n            stroke: color,\r\n          }}\r\n        />\r\n        {/* Small dot to finish animation. */}\r\n        {!startLoading && (\r\n          <circle\r\n            // className=\"timer-dot\"\r\n            cx=\"225\"\r\n            cy=\"125\"\r\n            r=\"17\"\r\n            fill={color}\r\n          />\r\n        )}\r\n      </svg>\r\n      <div className=\"timer-text\">{formatTime(elapsedTime)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircularTimer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}