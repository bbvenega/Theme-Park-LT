{"ast":null,"code":"// The stopwatch component is used to measure the time taken for an attraction to be completed.\n// This is used in combination with the circular timer component to display the time taken for an attraction to be completed.\nimport React,{useState,useEffect,useRef}from\"react\";import CircularTimer from\"./CircularTimer\";import BreakdownTimerModal from\"../Modals/BreakdownTimerModal\";import\"../../Styles/CircularTimer.css\";// The stopwatch function takes in the onStop, postedWaitTime, and onBreakdownTimeChange props.\n// The onStop prop is used to stop the stopwatch and notify the parent component.\n// The postedWaitTime prop is used to set the posted wait time.\n// The onBreakdownTimeChange prop is used to notify the parent component of the breakdown time.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Stopwatch=_ref=>{let{onStop,postedWaitTime,onBreakdownTimeChange}=_ref;const[time,setTime]=useState(0);const[isRunning,setIsRunning]=useState(false);const[showBreakdownModal,setShowBreakdownModal]=useState(false);const[breakdownTime,setBreakdownTime]=useState(0);const timerRef=useRef(null);// The useEffect hook is used to update the main timer.\nuseEffect(()=>{if(isRunning){timerRef.current=setInterval(()=>{setTime(prevTime=>prevTime+1);},1000);}else{clearInterval(timerRef.current);}return()=>clearInterval(timerRef.current);},[isRunning]);// The useEffect hook is used to notify the parent component of breakdown time changes.\nuseEffect(()=>{onBreakdownTimeChange(breakdownTime);},[breakdownTime,onBreakdownTimeChange]);// The start function is used to start the stopwatch.\nconst start=()=>{setIsRunning(true);};// The stop function is used to stop the stopwatch.\nconst stop=()=>{setIsRunning(false);if(onStop){onStop(time);}};// The reset function is used to reset the stopwatch.\nconst reset=()=>{clearInterval(timerRef.current);setIsRunning(false);setTime(0);};// The return statement below will render the Stopwatch component.\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(CircularTimer,{duration:postedWaitTime*60,elapsedTime:time}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttons-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:start,children:\"Start\"}),/*#__PURE__*/_jsx(\"button\",{className:\"stop-button\",onClick:stop,children:\"Stop\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:reset,children:\"Reset\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:()=>setShowBreakdownModal(true),children:\"\\uD83D\\uDEA7\"})]}),/*#__PURE__*/_jsx(BreakdownTimerModal,{show:showBreakdownModal,onClose:()=>setShowBreakdownModal(false),breakdownTime:breakdownTime,setBreakdownTime:setBreakdownTime})]});};export default Stopwatch;","map":{"version":3,"names":["React","useState","useEffect","useRef","CircularTimer","BreakdownTimerModal","jsx","_jsx","jsxs","_jsxs","Stopwatch","_ref","onStop","postedWaitTime","onBreakdownTimeChange","time","setTime","isRunning","setIsRunning","showBreakdownModal","setShowBreakdownModal","breakdownTime","setBreakdownTime","timerRef","current","setInterval","prevTime","clearInterval","start","stop","reset","children","duration","elapsedTime","className","onClick","show","onClose"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Timers/stopwatch.js"],"sourcesContent":["// The stopwatch component is used to measure the time taken for an attraction to be completed.\r\n// This is used in combination with the circular timer component to display the time taken for an attraction to be completed.\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport CircularTimer from \"./CircularTimer\";\r\nimport BreakdownTimerModal from \"../Modals/BreakdownTimerModal\";\r\nimport \"../../Styles/CircularTimer.css\";\r\n\r\n// The stopwatch function takes in the onStop, postedWaitTime, and onBreakdownTimeChange props.\r\n// The onStop prop is used to stop the stopwatch and notify the parent component.\r\n// The postedWaitTime prop is used to set the posted wait time.\r\n// The onBreakdownTimeChange prop is used to notify the parent component of the breakdown time.\r\nconst Stopwatch = ({ onStop, postedWaitTime, onBreakdownTimeChange }) => {\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [showBreakdownModal, setShowBreakdownModal] = useState(false);\r\n  const [breakdownTime, setBreakdownTime] = useState(0);\r\n  const timerRef = useRef(null);\r\n\r\n  // The useEffect hook is used to update the main timer.\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setTime((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(timerRef.current);\r\n    }\r\n\r\n    return () => clearInterval(timerRef.current);\r\n  }, [isRunning]);\r\n\r\n  // The useEffect hook is used to notify the parent component of breakdown time changes.\r\n  useEffect(() => {\r\n    onBreakdownTimeChange(breakdownTime);\r\n  }, [breakdownTime, onBreakdownTimeChange]);\r\n\r\n  // The start function is used to start the stopwatch.\r\n  const start = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  // The stop function is used to stop the stopwatch.\r\n  const stop = () => {\r\n    setIsRunning(false);\r\n    if (onStop) {\r\n      onStop(time);\r\n    }\r\n  };\r\n\r\n  // The reset function is used to reset the stopwatch.\r\n  const reset = () => {\r\n    clearInterval(timerRef.current);\r\n    setIsRunning(false);\r\n    setTime(0);\r\n  };\r\n\r\n  // The return statement below will render the Stopwatch component.\r\n  return (\r\n    <div>\r\n      <CircularTimer duration={postedWaitTime * 60} elapsedTime={time} />\r\n      <div className=\"buttons-container\">\r\n        <button className=\"button\" onClick={start}>Start</button>\r\n        <button className=\"stop-button\" onClick={stop}>Stop</button>\r\n        <button className=\"button\" onClick={reset}>Reset</button>\r\n        <button className=\"button\" onClick={() => setShowBreakdownModal(true)}>ðŸš§</button>\r\n      </div>\r\n\r\n      <BreakdownTimerModal\r\n        show={showBreakdownModal}\r\n        onClose={() => setShowBreakdownModal(false)}\r\n        breakdownTime={breakdownTime}\r\n        setBreakdownTime={setBreakdownTime}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}