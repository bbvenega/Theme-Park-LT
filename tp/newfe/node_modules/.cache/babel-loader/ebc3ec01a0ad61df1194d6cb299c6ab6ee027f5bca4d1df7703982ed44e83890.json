{"ast":null,"code":"// The addVisitModal component is used to display a stopwatch to track how long a ride is broken. The component is displayed on the Visit Page.\n// BreakdownTimerModal.js\nimport React,{useEffect}from\"react\";import\"../../Styles/Modal.css\";import{formatTime}from\"../../services/Time Stuff/formatTime\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BreakdownTimerModal=_ref=>{let{show,onClose,breakdownTime,setBreakdownTime}=_ref;useEffect(()=>{let timer;if(show){timer=setInterval(()=>{setBreakdownTime(prevTime=>prevTime+1);},1000);}return()=>clearInterval(timer);},[show,setBreakdownTime]);return/*#__PURE__*/_jsx(\"div\",{className:\"modal-backdrop \".concat(show?\"fade-in\":\"fade-out\"),children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content \".concat(show?\"fade-in\":\"fade-out\"),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDEA7 Breakdown Timer \\uD83D\\uDEA7\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Breakdown Time \",/*#__PURE__*/_jsx(\"br\",{}),formatTime(breakdownTime)]}),/*#__PURE__*/_jsx(\"button\",{onClick:onClose,className:\"modal-close-button\",children:\"\\xD7\"})]})});};export default BreakdownTimerModal;","map":{"version":3,"names":["React","useEffect","formatTime","jsx","_jsx","jsxs","_jsxs","BreakdownTimerModal","_ref","show","onClose","breakdownTime","setBreakdownTime","timer","setInterval","prevTime","clearInterval","className","concat","children","onClick"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Modals/BreakdownTimerModal.js"],"sourcesContent":["// The addVisitModal component is used to display a stopwatch to track how long a ride is broken. The component is displayed on the Visit Page.\r\n// BreakdownTimerModal.js\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport \"../../Styles/Modal.css\";\r\nimport { formatTime } from \"../../services/Time Stuff/formatTime\";\r\n\r\n\r\nconst BreakdownTimerModal = ({ show, onClose, breakdownTime, setBreakdownTime }) => {\r\n  useEffect(() => {\r\n    let timer;\r\n    if (show) {\r\n      timer = setInterval(() => {\r\n        setBreakdownTime((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [show, setBreakdownTime]);\r\n\r\n  return (\r\n    <div className={`modal-backdrop ${show ? \"fade-in\" : \"fade-out\"}`}>\r\n      <div className={`modal-content ${show ? \"fade-in\" : \"fade-out\"}`}>\r\n        <h3>ðŸš§ Breakdown Timer ðŸš§</h3>\r\n        <p>Breakdown Time <br></br>{formatTime(breakdownTime)}</p>\r\n        <button onClick={onClose} className=\"modal-close-button\">\r\n          &times;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BreakdownTimerModal;\r\n\r\n"],"mappings":"AAAA;AACA;AAEA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,MAAO,wBAAwB,CAC/B,OAASC,UAAU,KAAQ,sCAAsC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAGlE,KAAM,CAAAC,mBAAmB,CAAGC,IAAA,EAAwD,IAAvD,CAAEC,IAAI,CAAEC,OAAO,CAAEC,aAAa,CAAEC,gBAAiB,CAAC,CAAAJ,IAAA,CAC7EP,SAAS,CAAC,IAAM,CACd,GAAI,CAAAY,KAAK,CACT,GAAIJ,IAAI,CAAE,CACRI,KAAK,CAAGC,WAAW,CAAC,IAAM,CACxBF,gBAAgB,CAAEG,QAAQ,EAAKA,QAAQ,CAAG,CAAC,CAAC,CAC9C,CAAC,CAAE,IAAI,CAAC,CACV,CACA,MAAO,IAAMC,aAAa,CAACH,KAAK,CAAC,CACnC,CAAC,CAAE,CAACJ,IAAI,CAAEG,gBAAgB,CAAC,CAAC,CAE5B,mBACER,IAAA,QAAKa,SAAS,mBAAAC,MAAA,CAAoBT,IAAI,CAAG,SAAS,CAAG,UAAU,CAAG,CAAAU,QAAA,cAChEb,KAAA,QAAKW,SAAS,kBAAAC,MAAA,CAAmBT,IAAI,CAAG,SAAS,CAAG,UAAU,CAAG,CAAAU,QAAA,eAC/Df,IAAA,OAAAe,QAAA,CAAI,2CAAqB,CAAI,CAAC,cAC9Bb,KAAA,MAAAa,QAAA,EAAG,iBAAe,cAAAf,IAAA,QAAQ,CAAC,CAACF,UAAU,CAACS,aAAa,CAAC,EAAI,CAAC,cAC1DP,IAAA,WAAQgB,OAAO,CAAEV,OAAQ,CAACO,SAAS,CAAC,oBAAoB,CAAAE,QAAA,CAAC,MAEzD,CAAQ,CAAC,EACN,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAZ,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}