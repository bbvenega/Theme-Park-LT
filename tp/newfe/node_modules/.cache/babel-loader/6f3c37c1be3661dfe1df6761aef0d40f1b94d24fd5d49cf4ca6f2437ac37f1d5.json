{"ast":null,"code":"// The modal component is used as a general modal but in this case, it is used to display the modal for the attractionsList component.\nimport React,{useEffect,useState}from\"react\";import\"../../Styles/Modal.css\";// The modal function takes in the show, onClose, and children props.\n// The show prop is used to determine if the modal should be displayed or not.\n// The onClose prop is used to close the modal.\n// The children prop is used to render the children of the modal.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InfoModal=_ref=>{let{show,onClose}=_ref;const[isVisible,setIsVisible]=useState(false);// The useEffect hook is used to set the visibility of the modal.\nuseEffect(()=>{if(show){setIsVisible(true);}else{const timer=setTimeout(()=>setIsVisible(false),200);return()=>clearTimeout(timer);}},[show]);// useEffect hook is dependent on the show variable.\n// console.log(\"isVisible: \", isVisible);\n// The return statement below will render the Modal component.\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"modal-backdrop \".concat(show?\"fade-in\":\"fade-out\"),children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content \".concat(show?\"fade-in\":\"fade-out\"),children:[/*#__PURE__*/_jsx(\"button\",{onClick:onClose,className:\"modal-close-button\",children:\"\\xD7\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to Your Visit Page!\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Track All the Attractions You Experience During Your Visit\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Use the \\\"Add Attraction\\\" button to select rides from a list with live wait times. You can also specify whether you are using the single rider line or a fastpass.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Start the timer to track your wait time in line. When you reach the end of the line, stop the timer and submit your time.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"After submitting, you can review your ride times and see how long you waited for each attraction.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Important Notes\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Remember to stop the timer when you reach the end of the line.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Submit your time before starting the next ride.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"'\\uD83D\\uDEA7' - Use this button to track how long a ride is broken down if you decide to wait through it.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"'\\uD83D\\uDD28' - Indicates that the ride broke down while you were in pne.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"'\\uD83D\\uDE4B' - Indicates that you used the single rider pne.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"'\\u26A1' - Indicates that you used a fastpass.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Enjoy your visit!\"})]})});};export default InfoModal;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","InfoModal","_ref","show","onClose","isVisible","setIsVisible","timer","setTimeout","clearTimeout","className","concat","children","onClick"],"sources":["C:/Users/Brian/Documents/GitHub/Theme-Park-LT/tp/newfe/src/components/Modals/InfoModal.js"],"sourcesContent":["// The modal component is used as a general modal but in this case, it is used to display the modal for the attractionsList component.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../../Styles/Modal.css\";\r\n\r\n// The modal function takes in the show, onClose, and children props.\r\n// The show prop is used to determine if the modal should be displayed or not.\r\n// The onClose prop is used to close the modal.\r\n// The children prop is used to render the children of the modal.\r\nconst InfoModal = ({ show, onClose }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  // The useEffect hook is used to set the visibility of the modal.\r\n  useEffect(() => {\r\n    if (show) {\r\n      setIsVisible(true);\r\n    } else {\r\n      const timer = setTimeout(() => setIsVisible(false), 200);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [show]); // useEffect hook is dependent on the show variable.\r\n\r\n  // console.log(\"isVisible: \", isVisible);\r\n\r\n  // The return statement below will render the Modal component.\r\n  return (\r\n    <div className={`modal-backdrop ${show ? \"fade-in\" : \"fade-out\"}`}>\r\n      <div className={`modal-content ${show ? \"fade-in\" : \"fade-out\"}`}>\r\n        <button onClick={onClose} className=\"modal-close-button\">\r\n          &times;\r\n        </button>\r\n        <h1>Welcome to Your Visit Page!</h1>\r\n        <h3>Track All the Attractions You Experience During Your Visit</h3>\r\n        <p>\r\n          Use the \"Add Attraction\" button to select rides from a list with live\r\n          wait times. You can also specify whether you are using the single\r\n          rider line or a fastpass.\r\n        </p>\r\n        <p>\r\n          Start the timer to track your wait time in line. When you reach the\r\n          end of the line, stop the timer and submit your time.\r\n        </p>\r\n        <p>\r\n          After submitting, you can review your ride times and see how long you\r\n          waited for each attraction.\r\n        </p>\r\n\r\n        <h3>Important Notes</h3>\r\n\r\n          <p>\r\n            Remember to stop the timer when you reach the end of the line.\r\n          </p>\r\n          <p>Submit your time before starting the next ride.</p>\r\n          <p>\r\n            'ðŸš§' - Use this button to track how long a ride is broken down if\r\n            you decide to wait through it.\r\n          </p>\r\n          <p>\r\n            'ðŸ”¨' - Indicates that the ride broke down while you were in pne.\r\n          </p>\r\n          <p>'ðŸ™‹' - Indicates that you used the single rider pne.</p>\r\n          <p>'âš¡' - Indicates that you used a fastpass.</p>\r\n\r\n\r\n        <h3>Enjoy your visit!</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoModal;\r\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,wBAAwB,CAE/B;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,IAAI,CAAEC,OAAQ,CAAC,CAAAF,IAAA,CAClC,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAEjD;AACAD,SAAS,CAAC,IAAM,CACd,GAAIQ,IAAI,CAAE,CACRG,YAAY,CAAC,IAAI,CAAC,CACpB,CAAC,IAAM,CACL,KAAM,CAAAC,KAAK,CAAGC,UAAU,CAAC,IAAMF,YAAY,CAAC,KAAK,CAAC,CAAE,GAAG,CAAC,CACxD,MAAO,IAAMG,YAAY,CAACF,KAAK,CAAC,CAClC,CACF,CAAC,CAAE,CAACJ,IAAI,CAAC,CAAC,CAAE;AAEZ;AAEA;AACA,mBACEL,IAAA,QAAKY,SAAS,mBAAAC,MAAA,CAAoBR,IAAI,CAAG,SAAS,CAAG,UAAU,CAAG,CAAAS,QAAA,cAChEZ,KAAA,QAAKU,SAAS,kBAAAC,MAAA,CAAmBR,IAAI,CAAG,SAAS,CAAG,UAAU,CAAG,CAAAS,QAAA,eAC/Dd,IAAA,WAAQe,OAAO,CAAET,OAAQ,CAACM,SAAS,CAAC,oBAAoB,CAAAE,QAAA,CAAC,MAEzD,CAAQ,CAAC,cACTd,IAAA,OAAAc,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCd,IAAA,OAAAc,QAAA,CAAI,4DAA0D,CAAI,CAAC,cACnEd,IAAA,MAAAc,QAAA,CAAG,qKAIH,CAAG,CAAC,cACJd,IAAA,MAAAc,QAAA,CAAG,2HAGH,CAAG,CAAC,cACJd,IAAA,MAAAc,QAAA,CAAG,mGAGH,CAAG,CAAC,cAEJd,IAAA,OAAAc,QAAA,CAAI,iBAAe,CAAI,CAAC,cAEtBd,IAAA,MAAAc,QAAA,CAAG,gEAEH,CAAG,CAAC,cACJd,IAAA,MAAAc,QAAA,CAAG,iDAA+C,CAAG,CAAC,cACtDd,IAAA,MAAAc,QAAA,CAAG,4GAGH,CAAG,CAAC,cACJd,IAAA,MAAAc,QAAA,CAAG,4EAEH,CAAG,CAAC,cACJd,IAAA,MAAAc,QAAA,CAAG,gEAAoD,CAAG,CAAC,cAC3Dd,IAAA,MAAAc,QAAA,CAAG,gDAAyC,CAAG,CAAC,cAGlDd,IAAA,OAAAc,QAAA,CAAI,mBAAiB,CAAI,CAAC,EACvB,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}